local M = {}
M.quotes = {
  -- 1. https://www.ccs.neu.edu/home/lieber/courses/csg110/sp08/Pragmatic%20Quick%20Reference.htm
  -- 2. and some more from https://www.defprogramming.com
  -- 3. some more quotes from @codewisdom@twitter.com
  -- 4. https://programming-quotesapi.vercel.app/api/random
  -- 5. https://www.reddit.com/r/quotes/
  -- 6. https://www.cs.yale.edu/homes/perlis-alan/quotes.html
  -- 7. https://amturing.acm.org/award_winners/dijkstra_1053701.cfm
  -- 8. https://registerspill.thorstenball.com/p/the-basics
  -- { "'select' isn't broken.", "", "It is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application.", "", "- The Pragmatic Programmer" },
  -- { "A LISP programmer knows the value of everything, but the cost of nothing.", "", "- Alan J. Perlis" },
  -- { "All loops are infinite ones for faulty RAM modules." },
  -- { "Always design for concurrency.", "", "Allow for concurrency, and you'll design cleaner interfaces with fewer assumptions.", "", "- The Pragmatic Programmer" },
  -- { "Always use source code control.", "", "Source code control is a time machine for your work - you can go back.", "", "- The Pragmatic Programmer" },
  -- { "Analyze workflow to improve concurrency.", "", "Exploit concurrency in your user's workflow.", "", "- The Pragmatic Programmer" },
  -- { "Computers are harder to maintain at high altitude. Thinner air means less cushion between disk heads and platters. Also more radiation." },
  -- { "Don't use manual procedures.", "", "A shell script or batch file will execute the same instructions, in the same order, time after time.", "", "- The Pragmatic Programmer" },
  -- { "Don't use wizard code you don't understand.", "", "Wizards can generate reams of code. Make sure you understand all of it before you incorporate it into your project.", "", "- The Pragmatic Programmer" },
  -- { "Estimate the order of your algorithms.", "", "Get a feel for how long things are likely to take before you write code.", "", "- The Pragmatic Programmer" },
  -- { "Finish what you start.", "", "Where possible, the routine or object that allocates a resource should be responsible for deallocating it.", "", "- The Pragmatic Programmer" },
  -- { "Learn a text manipulation language.", "", "You spend a large part of each day working with text. Why not have the computer do some of it for you?", "", "- The Pragmatic Programmer" },
  -- { "Organize teams around functionality.", "", "Don't separate designers from coders, testers from data modelers. Build teams the way you build code.", "", "- The Pragmatic Programmer" },
  -- { "Put abstractions in code, details in metadata.", "", "Program for the general case, and put the specifics outside the compiled code base.", "", "- The Pragmatic Programmer" },
  -- { "Recursion is the root of computation since it trades description for time.", "", "- Alan Perlis" },
  -- { "Separate views from models.", "", "Gain flexibility at low cost by designing your application in terms of models and views.", "", "- The Pragmatic Programmer" },
  -- { "Sign your work.", "", "Craftsmen of an earlier age were proud to sign their work. You should be, too.", "", "- The Pragmatic Programmer" },
  -- { "Test your estimates.", "", "Mathematical analysis of algorithms doesn't tell you everything. Try timing your code in its target environment.", "", "- The Pragmatic Programmer" },
  -- { "Use blackboards to coordinate workflow.", "", "Use blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants.", "", "- The Pragmatic Programmer" },
  -- { "Use the power of command shells.", "", "Use the shell when graphical user interfaces don't cut it.", "", "The Pragmatic Programmer" },
  { "...Thinking this way will teach you two things about computers: One, there's no magic, no matter how much it looks like there is. There’s just work to make things look like magic. And two, it’s crazy in there.", "", "- Paul Ford" },
  { "5 steps to write better commit messages:", "", "1. Capitalize the first word and do not end in punctuation.", "2. Use imperative mood in the subject line.", "3. Specify the type of commit.", "4. The first line should ideally be no longer than 50 characters, and the body should be restricted to 72 characters.", "Be direct, try to eliminate filler words and phrases in these sentences (examples: though, maybe, I think, kind of). Think like a journalist.", "", "- Natalie Pina" },
  { "640K ought to be enough for anybody.", "", "- Bill Gates, 1981" },
  { "A clever person solves a problem. A wise person avoids it.", "", "- Albert Einstein" },
  { "A complex system that works is invariably found to have evolved from a simple system that worked. The inverse proposition also appears to be true: A complex system designed from scratch never works and cannot be made to work.", "", "- John Gall" },
  { "A component of a system should behave in a way that most users will expect it to behave, and therefore not astonish or surprise users.", "", "- Principle of Least Astonishment" },
  { "A computer lets you make more mistakes faster than any other invention in human history, with the possible exceptions of handguns and tequila.", "", "- Mitch Ratcliffe" },
  { "A display connected to a digital computer gives us a chance to gain familiarity with concepts not realizable in the physical world. It is a looking glass into a mathematical wonderland.", "", "- Ivan Sutherland" },
  { "A foolish consistency is the hobgoblin of little minds, adored by little statesmen and philosophers and divines. With consistency a great soul has simply nothing to do. He may as well concern himself with his shadow on the wall.", "", "- Ralph Waldo Emerson" },
  { "A framework can provide 90% of the features we need quickly - giving us a false sense of confidence early in the development cycle - and then be frustratingly hard when it comes to implementing the last 10%.", "", "- Tony Parisi" },
  { "A good API is not just easy to use but also hard to misuse.", "", "- JBD" },
  { "A good programmer is someone who always looks both ways before crossing a one-way street.", "", "- Doug Linder" },
  { "A happy programmer is a productive programmer. That's why we optimize for happiness and you should too. Don't just pick tools and practices based on industry standards or performance metrics. Look at the intangibles: Is there passion, pride, and craftmanship here? Would you truly be happy working in this environment eight hours a day?", "", "- 37Signals" },
  { "A human being should be able to change a diaper, plan an invasion, butcher a hog, conn a ship, design a building, write a sonnet, balance accounts, build a wall, set a bone, comfort the dying, take orders, give orders, cooperate, act alone, solve equations, analyze a new problem, pitch manure, program a computer, cook a tasty meal, fight efficiently, die gallantly. Specialization is for insects.", "", "- Robert A. Heinlein" },
  { "A language that doesn't have everything is actually easier to program in than some that do.", "", "- Dennis M. Ritchie" },
  { "A man provided with paper, pencil, and rubber, and subject to strict discipline, is in effect a universal machine.", "", "- Alan Turing" },
  { "A method is not a class. Be suspicious of any class whose name is a verb or derived from a verb, especially those that only one piece of meaningful behavior.", "", "- Object-Oriented Design Heuristics" },
  { "A primary cause of complexity is that software vendors uncritically adopt almost any feature that users want.", "", "- Niklaus Wirth" },
  { "A program is like a poem: you cannot write a poem without writing it.", "", "- E.W. Dijkstra" },
  { "A program that produces incorrect results twice as fast is infinitely slower.", "", "- John Ousterhout" },
  { "A programming language is for thinking about programs, not for expressing programs you've already thought of. It should be a pencil, not a pen.", "", "- Paul Graham" },
  { "A ship in port is safe, but that is not what ships are for. Sail out to sea and do new things.", "", "- Grace Hopper" },
  { "A smooth sea never made a skilled sailor.", "", "- Franklin D. Roosevelt" },
  { "A test is the first user of your code.", "", "Use its feedback to guide you what to do.", "", "- The Pragmatic Programmer" },
  { "A typical software project can present more opportunities to learn from mistakes than some people get in a lifetime.", "", "- Steve McConnell" },
  { "Abstraction is not about vagueness, it is about being precise at a new semantic level.", "", "- Rob Pike" },
  { "Abstractions live longer than details.", "", "Invest in the abstraction, not the implementation. Abstractions can survive the barrage of changes from different implementations and new technologies.", "", "- The Pragmatic Programmer" },
  { "Accept that sometimes you’ll have to do things that you don’t find interesting or exciting or that don’t bring you joy. Sometimes it’s just work.", "", "- Thorsten Ball" },
  { "Act locally.", "", "Keep the scope of mutable variables and open resources short and easily visible.", "", "- The Pragmatic Programmer" },
  { "Adapting old programs to fit new machines usually means adapting new machines to behave like old ones.", "", "- Alan Perlis" },
  { "Adding manpower to a late software project makes it later.", "", "- Brooks's law" },
  { "All idioms must be learned. Good idioms only need to be learned once.", "", "- Alan Cooper" },
  { "All problems in computer science can be solved with another level of indirection.", "", "- David Wheeler" },
  { "All programming is an exercise in caching.", "", "- Terje Mathisen" },
  { "All sorts of things can happen when you’re open to new ideas and playing around with things.", "", "- Stephanie Kwolek" },
  { "Almost every attempt at making something better will be regarded by someone else as a personal attack.", "", "- Chris Sacca" },
  { "Almost every programming language is overrated by its practitioners.", "", "- Larry Wall" },
  { "Always code as if the person who ends up maintaining your code is a violent psychopath who knows where you live.", "", "- John Woods" },
  { "Always implement things when you actually need them, never when you just foresee that you need them.", "", "- Ron Jeffries" },
  { "Always remember, however, that there’s usually a simpler and better way to do something than the first way that pops into your head.", "", "- Donald Knuth" },
  { "Always take small steps.", "", "Check the feedback and adjust before proceeding.", "", "- The Pragmatic Programmer" },
  { "An API that isn't comprehensible isn't usable.", "", "- James Gosling" },
  { "An evolving system increases its complexity unless work is done to reduce it.", "", "- Meir Lehman" },
  { "An organisation that treats its programmers as morons will soon have programmers that are willing and able to act like morons only.", "", "- Bjarne Stroustrup" },
  { "Any fool can write code that a computer can understand. Good programmers write code that humans can understand.", "", "- Martin Fowler" },
  { "Any intelligent fool can make things bigger, more complex, and more violent. It takes a touch of genius – and a lot of courage – to move in the opposite direction.", "", "- Albert Einstein" },
  { "Any non-trivial program contains at least one bug.", "", "- Anonymous" },
  { "Any sufficiently advanced technology is indistinguishable from magic.", "", "- Arthur C. Clarke" },
  { "Apex predator of Grug is complexity.", "Complexity bad.", "Say again:", "Complexity very bad.", "You say now:", "Complexity very, very bad.", "Given choice between complexity or one on one against T-Rex, Grug take T-Rex: at least Grug see T-Rex.", "", "- https://grugbrain.dev/" },
  { "Assertions validate your assumptions.", "", "Use them to protect your code from an uncertain world.", "", "- The Pragmatic Programmer" },
  { "At some point software design becomes less about what and more about when.", "", "- Kent Beck" },
  { "At the source of every error which is blamed on the computer you will find at least two human errors, including the error of blaming it on the computer.", "", "- Anonymous" },
  { "Avoid fortune-telling.", "", "Only look ahead as far as you can see.", "", "- The Pragmatic Programmer" },
  { "Avoiding complexity reduces bugs.", "", "- Linus Torvalds" },
  { "Be a catalyst for change.", "", "You can't force change on people. Instead, show them how the future might be and help them participate in creating it.", "", "- The Pragmatic Programmer" },
  { "Be curious. Read widely. Try new things. I think a lot of what people call intelligence boils down to curiosity.", "", "- Aaron Swartz" },
  { "Be humble, communicate clearly, and respect others. It costs nothing to be kind, but the impact is priceless.", "", "- Addy Osmani" },
  { "Be sure the abstractions you model are classes and not the roles objects play.", "", "- Object-Oriented Design Heuristics" },
  { "Beauty is more important in computing than anywhere else in technology because software is so complicated. Beauty is the ultimate defense against complexity.", "", "- David Gelernter" },
  { "Because of optimism, we usually expect the number of bugs to be smaller than it turns out to be. Therefore testing is usually the most mis-scheduled part of programming.", "", "- Fred Brooks" },
  { "Because we are uncertain about our scheduling estimates, we often lack the courage to defend them stubbornly against management and customer pressure.", "", "- Fred Brooks" },
  { "Becoming a good engineer is about collecting experience. Each project, even small ones, is a chance to add new techniques and tools to your toolbox.", "", "- Addy Osmani" },
  { "Before software can be reusable it first has to be usable.", "", "- Ralph Johnson" },
  { "Being a good software engineer is 3% talent, 97% not being distracted by the internet.", "", "- Unknown" },
  { "Being abstract is something profoundly different from being vague.", "", "- Edsger W. Dijkstra", },
  { "Beware of vendor hype, industry dogma, and the aura of the price tag.", "", "Judge tools on their merits.", "", "- The Pragmatic Programmer" },
  { "Blame processes, not people.", "", "- Llebac (reddit)" },
  { "Books are totally useless unless you take their advice. If you just keep reading them, thinking \"that's so insightful! that changes everything,\" but never actually doing anything different, then pretty quickly the feeling will wear off and you'll start searching for another book to fill the void.", "", "- Aaron Swartz" },
  { "Brilliance in a scientist does not consist in being right more often but in being wrong about more interesting topics.", "", "- Kent Beck" },
  { "Build documentation in, Don't bolt it on.", "", "Documentation created separately from code is less likely to be correct and up to date.", "", "- The Pragmatic Programmer" },
  { "Caches are bugs waiting to happen.", "", "- Rob Pike" },
  { "Care about your craft.", "", "Why spend your life developing software unless you care about doing it well?", "", "- The Pragmatic Programmer" },
  { "Cleaning code does NOT take time. NOT cleaning code does take time.", "", "- Robert C. Martin" },
  { "Code breaks and then it falls apart, and it often takes many, many tries until that magical moment when what you're trying to build comes to life.", "", "- Reshma Saujani" },
  { "Code is there to explain the comments to the computer.", "", "- Andy Harris" },
  { "Code isn't written in stone, it's written in Christmas lights. Put away all nice and neat and the next time you pull it out it's a knitted mess of eldritch make.", "", "- Unknown" },
  { "Code never lies, comments sometimes do.", "", "- Ron Jeffries" },
  { "Code wants to be simple... I had to give up the idea that I had the perfect vision of the system to which the system had to conform. Instead, I had to accept that I was only the vehicle for the system expressing its own desire for simplicity. My vision could shape initial direction, and my attention to the desires of the code could affect how quickly and how well the system found its desired shape, but the system is riding me much more than I am riding the system.", "", "- Kent Beck" },
  { "Codes are a puzzle. A game, just like any other game.", "", "- Alan Turing" },
  { "Coding is \"90 percent finished\" for half of the total coding time. Debugging is \"99 percent complete\" most of the time.", "", "- Fred Brooks" },
  { "Comments are apologies." , "", "- /u/g1ldedsteel" },
  { "Compatibility means deliberately repeating other peoples' mistakes.", "", "- David Wheeler" },
  { "Complexity kills. It sucks the life out of developers, it makes products difficult to plan, build and test, it introduces security challenges, and it causes end-user and administrator frustration.", "", "- Ray Ozzie" },
  { "Computer programming is an art, because it applies accumulated knowledge to the world, because it requires skill and ingenuity, and especially because it produces objects of beauty. A programmer who subconsciously views himself as an artist will enjoy what he does and will do it better.", "", "- Donald Knuth" },
  { "Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.", "", "- Eric S. Raymond" },
  { "Computer science is no more about computers than astronomy is about telescopes.", "", "- Edsger W. Dijkstra" },
  { "Computers are good at following instructions, but not at reading your mind.", "", "- Donald Knuth" },
  { "Computers are useless. They can only give you answers.", "", "- Pablo Picasso" },
  { "Conceptual integrity is the most important consideration in system design. It is better to have a system omit certain anomalous features and improvements, but to reflect one set of design ideas, than to have one that contains many good but independent and uncoordinated ideas.", "", "- Fred Brooks" },
  { "Configure, don't integrate.", "", "Implement technology choices for an application as configuration options, not through integration or engineering.", "", "- The Pragmatic Programmer" },
  { "Consider a cow. A cow doesn't have the problem-solving skill of a chimpanzee, which has discovered how to get termites out of the ground by putting a stick into a hole. Evolution has developed the brain's ability to solve puzzles, and at the same time has produced in our brain a pleasure of solving problems.", "", "- Martin Gardner" },
  { "Constraints are advantages in disguise. Limited resources force you to make do with what you've got. There's no room for waste. And that forces you to be creative.", "", "- 37Signals" },
  { "Contrary to popular belief, Unix is user friendly. It just happens to be very selective about who it decides to make friends with." },
  { "Controlling complexity is the essence of computer programming.", "", "- Brian Kernighan" },
  { "Crash early.", "", "A dead program normally does a lot less damage than a crippled one.", "", "- The Pragmatic Programmer" },
  { "Creativity comes from applying things you learn in other fields to the field you work in.", "", "- Aaron Swartz" },
  { "Critically analyze what you read and hear.", "", "Don't be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project.", "", "- The Pragmatic Programmer" },
  { "DRY - Don't Repeat Yourself.", "", "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.", "", "- The Pragmatic Programmer" },
  { "Dealing with failure is easy: Work hard to improve. Success is also easy to handle: You've solved the wrong problem. Work hard to improve.", "", " - Alan Perlis" },
  { "Debugging becomes significantly easier if you first admit that you are the problem.", "", "- William Laeder" },
  { "Debugging is like being the detective in a crime movie where you are also the murderer.", "", "- Filipe Fortes" },
  { "Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.", "", "- Kernighan's law (Brian Kernighan)" },
  { "Decoupled code is easier to change.", "", "Coupling ties things together so that it's harder to change just one thing.", "", "- The Pragmatic Programmer" },
  { "Defer abstractions as late as possible. The more you learn about the problem space the better the abstraction will be. Premature abstractions are often worse than no abstraction.", "", "- pydry (reddit)" },
  { "Deleted code is debugged code.", "", "- Jeff Sickel" },
  { "Derived classes must have knowledge of their base class by definition, but base classes should not know anything about their derived classes.", "", "- Object-Oriented Design Heuristics" },
  { "Design With contracts.", "", "Use contracts to document and verify that code does no more and no less than it claims to do.", "", "- The Pragmatic Programmer" },
  { "Design to test.", "", "Start thinking about testing before you write a line of code.", "", "- The Pragmatic Programmer" },
  { "Design using services.", "", "Design in terms of services - independent, concurrent objects behind well-defined, consistent interfaces.", "", "- The Pragmatic Programmer" },
  { "Design work doesn't just satisfy requirements, it elicits them.", "", "- Fred Brooks" },
  { "Despite being roughly twice as many characters, it requires a fraction of the mental effort when you read it.", "", "- Felienne Hermans" },
  { "Developing tolerance for imperfection is the key factor in turning chronic starters into consistent finishers.", "", "- Jon Acuff" },
  { "Do not clutter the public interface of a class with items that clients are not able to use or are not interested in using.", "", "- Object-Oriented Design Heuristics" },
  { "Do not create god classes/objects (classes that control all other classes). Be very suspicious of classes whose name contains Driver, Manager, System, SubSystem.", "", "- Object-Oriented Design Heuristics" },
  { "Do not turn objects of a class into derived classes of the class. Be very suspicious of any derived class for which there is only one instance.", "", "- Object-Oriented Design Heuristics" },
  { "Do the homework before the meeting. You’ll stand out.", "", "- Thorsten Ball" },
  { "Do the simplest thing that could possibly work.", "", "- Kent Beck" },
  { "Document as you go.", "", "Treat every hero moment as an opportunity to write a short runbook or doc.", "", "- Lior Neu-ner" },
  { "Documenting is very, very hard; it’s time-consuming. To do it right, you’ve got to do it like programming. You’ve got to deconstruct it, put it together in nice ways, rewrite it when it’s wrong. People don’t do that.", "", "- Ken Thompson" },
  { "Don't ask for \"quick\" reviews when you never review other people’s code.", "", "- Thorsten Ball" },
  { "Don't assume it. Prove it.", "", "Prove your assumptions in the actual environment - with real data and boundary conditions.", "", "- The Pragmatic Programmer" },
  { "Don't attach your identity to your code. Don't attach anyone's identity to their code. Realize that people are separate from the artifacts they produce. Don't take code criticism personally but be very careful when criticizing others' code.", "", "- Alex Ewerlöf" },
  { "Don't be a slave to formal methods.", "", "Don't blindly adopt any technique without putting it into the context of your development practices and capabilities.", "", "- The Pragmatic Programmer" },
  { "Don't comment bad code. Rewrite it.", "", "- Brian W. Kernighan" },
  { "Don't do speculative programming. Only make the code extensible if it is a validated assumption that it'll be extended. Chances are by the time it gets extended, the problem definition looks different from when you wrote the code.", "", "- Alex Ewerlöf" },
  { "Don't document the problem, fix it.", "", "- Atli Björgvin Oddsson" },
  { "Don't even start considering solutions until you understand the problem. Your goal should be to \"solve\" the problem mostly within the problem domain, not the solution domain.", "", "- Oz Nova" },
  { "Don't gather requirements. Dig for them.", "", "Requirements rarely lie on the surface. They're buried deep beneath layers of assumptions, misconceptions, and politics.", "", "- The Pragmatic Programmer" },
  { "Don't have good ideas if you aren't willing to be responsible for them.", "", "- Alan Perlis" },
  { "Don't let anyone rob you of your imagination, your creativity, or your curiosity. It's your place in the world; it's your life. Go on and do all you can with it, and make it the life you want to live.", "", "- Mae Jemison" },
  { "Don't live with broken windows.", "", "Fix bad designs, wrong decisions, and poor code when you see them.", "", "- Andy Hunt and Dave Thomas" },
  { "Don't panic when debugging.", "", "Take a deep breath and think about what could be causing the bug.", "", "- The Pragmatic Programmer" },
  { "Don't program by coincidence.", "", "Rely only on reliable things. Beware of accidental complexity, and don't confuse a happy coincidence with a purposeful plan.", "", "- The Pragmatic Programmer" },
  { "Don't think outside the box. Find the box.", "", "When faced with an impossible problem, identify the real constraints. Ask yourself: \"Does it have to be done this way? Does it have to be done at all?\"", "", "- The Pragmatic Programmer" },
  { "Don't use manual procedures.", "", "A computer will execute the same instructions, in the same order, time after time.", "", "- The Pragmatic Programmer" },
  { "Don't worry about anything. Just do what you can and be the best you can be.", "", "- Douglas Crockford" },
  { "Each unit should have only limited knowledge about other units: only units \"closely\" related to the current unit.", "", "Each unit should only talk to its friends; don't talk to strangers.", "", "Only talk to your immediate friends.", "", "- Law of Demeter" },
  { "Eagleson's Law: Any code of your own that you haven't looked at for six or more months might as well have been written by someone else.", "", "- Alan Eagleson" },
  { "Easy things should be easy and hard things should be possible.", "", "- Larry Wall" },
  { "Eliminate effects between unrelated things.", "", "Design components that are self-contained, independent, and have a single, well-defined purpose.", "", "- The Pragmatic Programmer" },
  { "English is just a programming language.", "", "Write documents as you would write code: honor the DRY principle, use metadata, MVC, automatic generation, and so on.", "", "- The Pragmatic Programmer" },
  { "Enjoy every step you take. If you're curious, there is always something new to be discovered in the backdrop of your daily life.", "", "- Roy T. Bennett" },
  { "Estimate to avoid surprises.", "", "Estimate before you start. You'll spot potential problems up front.", "", "- The Pragmatic Programmer" },
  { "Every application has an inherent amount of complexity that cannot be removed or hidden. Instead, it must be dealt with, either in product development or user interaction.", "", "- Law of conservation of complexity" },
  { "Every good work of software starts by scratching a developer’s personal itch.", "", "- Eric S. Raymond" },
  { "Every great developer you know got there by solving problems they were unqualified to solve until they actually did it.", "", "- Patrick McKenzie" },
  { "Every time you add a test, actually test that it would fail. Yes, literally: go and comment out the code that you think makes the test pass, then run the test, see it fail, comment the code back in, run test again, see it succeed. Only then have you written a test.", "", "- Thorsten Ball" },
  { "Everyday life is like programming, I guess. If you love something you can put beauty into it.", "", "- Donald Knuth" },
  { "Everything should be built top-down, except the first time.", "", "- Alan Perlis" },
  { "Extreme complication is contrary to art.", "", "- Claude Debussy" },
  { "Failing test before fixing code.", "", "Create a focused test that reveals the bug before you try fixing it.", "", "- The Pragmatic Programmer" },
  { "Failure is central to engineering. Every single calculation that an engineer makes is a failure calculation. Successful engineering is all about understanding how things break or fail.", "", "- Henry Petroski" },
  { "Fancy algorithms are slow when n is small, and n is usually small.", "", "- Rob Pike" },
  { "Feature-based releases expand to fill all available time until someone feels guilty for not finishing the feature on a magical, wish-fulfillment schedule, and hey, has it been a couple of years already?", "", "- Chromatic" },
  { "Find bugs once.", "", "Once a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on.", "", "- The Pragmatic Programmer" },
  { "Finish what you start.", "", "If you don't finish then you're just busy, not productive.", "", "- Brian Kernighan" },
  { "First do it, then do it right, then do it better.", "", "- Addy Osmani" },
  { "First, solve the problem. Then, write the code.", "", "- John Johnson" },
  { "Fix the cause, not the symptom.", "", "- Steve Maguire" },
  { "Fix the problem, not the blame.", "", "It doesn't really matter whether the bug is your fault or someone else's - it is still your problem, and it still needs to be fixed.", "", "- The Pragmatic Programmer" },
  { "Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.", "", "- Alan Perlis" },
  { "For a successful technology, reality must take precedence over public relations, for Nature cannot be fooled.", "", "- Richard Feynman" },
  { "For most software, efficiency just does not matter.", "", "- Daniel T. Barry" },
  { "Formal education will make you a living. Self-education will make you a fortune.", "", "- Jim Rohn" },
  { "Functions delay binding; data structures induce binding. Moral: Structure data late in the programming process.", "", "- Alan J. Perlis" },
  { "Functions should do one thing. They should do it well. They should do it only.", "", "- Robert C. Martin" },
  { "Gently exceed your users' expectations.", "", "Come to understand your users' expectations, then deliver just that little bit more.", "", "- The Pragmatic Programmer" },
  { "Give people a sense of velocity and speed. Nobody wants to fuck with a high-speed train.", "", "- Tanguy Crusson, Atlassian" },
  { "Given enough eyeballs, all bugs are shallow.", "", "- Linus Torvalds" },
  { "Good DX isn’t a nice-to-have, it’s fuel for the whole company.", "", "- sanduckhan (reddit)" },
  { "Good architecture is necessary to give programs enough structure to be able to grow large without collapsing into a puddle of confusion.", "", "- Douglas Crockford" },
  { "Good code is its own best documentation. As you're about to add a comment, ask yourself, \"How can I improve the code so that this comment isn't needed?\"", "", "- Steve McConnell" },
  { "Good design is easier to change than bad design.", "", "A thing is well designed if it adapts to the people who use it. For code, that means it must adapt by changing.", "", "- The Pragmatic Programmer" },
  { "Good programmers use their brains, but good guidelines save us having to think out every case.", "", "- Francis Glassborow" },
  { "Hell isn't other people's code. Hell is your own code from 3 years ago.", "", "- Jeff Atwood" },
  { "Hofstadter's Law: It always takes longer than you expect, even when you take into account Hofstadter's Law.", "", "- P. J. Plauger" },
  { "Hope is not a plan.", "", "- Jonathan Rosenberg" },
  { "How much time do you invest in cleaning it? Roughly the same amount of time it took you to write it. And that's the problem - nobody wants to put that effort in. Because they think they're done when it works. You're not done when it works! You're done when it's right.", "", "- Robert C. Martin" },
  { "I am never satisfied until I have said as much as possible in a few words, and writing briefly takes far more time than writing at length.", "", "- Carl Friedrich Gauss" },
  { "I am now going to make you a gift that will stay with you the rest of your life. For the rest of your life, every time you say, \"We've always done it that way,\" my ghost will appear and haunt you for twenty-four hours.", "", "- Grace Hopper" },
  { "I believe the hard part of building software to be the specification, design, and testing of this conceptual construct, not the labor of representing it and testing the fidelity of the representation.", "", "- Fred Brooks, No Silver Bullet, 1986" },
  { "I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it.", "", "- Bill Gates" },
  { "I don’t have a problem with someone using their talents to become successful, I just don’t think the highest calling is success. Things like freedom and the expansion of knowledge are beyond success, beyond the personal. Personal success is not wrong, but it is limited in importance, and once you have enough of it it is a shame to keep striving for that, instead of for truth, beauty, or justice.", "", "- Richard Stallman" },
  { "I have no special talent. I am only passionately curious.", "", "- Albert Einstein" },
  { "I have yet to see any problem, however complicated, which when looked at in the right way, did not become more complicated.", "", "- Poul Anderson" },
  { "I love deadlines. I like the whooshing sound they make as they fly by.", "", "- Douglas Adams" },
  { "I really think a champion is defined not by their wins, but how they can recover when they fall.", "", "- Serena Williams" },
  { "I think a lot of new programmers like to use advanced data structures and advanced language features as a way of demonstrating their ability. I call it the lion-tamer syndrome. Such demonstrations are impressive, but unless they actually translate into real wins for the project, avoid them.", "", "- Glyn Williams" },
  { "I think it is inevitable that people program poorly. Training will not substantially help matters. We have to learn to live with it.", "", "- Alan Perlis" },
  { "I think the best way to supervise is by personal example and by frequent code reviews.", "", "- Charles Simonyi" },
  { "I would rather die of passion than of boredom.", "", "- Vincent Van Gogh" },
  { "I'm not a great programmer. I'm just a good programmer with great habits.", "", "- Kent Beck" },
  { "I've finally learned what \"upward compatible\" means. It means we get to keep all our old mistakes.", "", "- Linus Torvalds" },
  { "I've got this need to program. I wake up in the morning with sentences of a literate program. Before breakfast — I’m sure poets must feel this — I have to go to the computer and write this paragraph and then I can eat and I’m happy.", "", "- Don Knuth" },
  { "I've known people who have not mastered their tools who are good programmers, but not a tool master who remained a mediocre programmer.", "", "- Kent Beck" },
  { "If a system is to serve the creative spirit, it must be entirely comprehensible to a single individual.", "", "- Alan Kay" },
  { "If builders built houses the way programmers built programs, the first woodpecker to come along would destroy civilization.", "", "- Gerald Weinberg" },
  { "If debugging is the process of removing bugs, then programming must be the process of putting them in.", "", "- Edsger W. Dijkstra" },
  { "If each part of the task must be separately coordinated with each other part, the effort increases as n(n-1)/2. Three workers require three times as much pairwise intercommunication as two; four require six times as much as two.", "", "- Fred Brooks" },
  { "If in physics there's something you don't understand, you can always hide behind the uncharted depths of nature. You can always blame God. You didn't make it so complex yourself. But if your program doesn't work, there is no one to hide behind. You cannot hide behind an obstinate nature. If it doesn't work, you've messed up.", "", "- Edsger W. Dijkstra" },
  { "If it doesn’t work, it doesn’t matter how fast it doesn’t work.", "", "- Mich Ravera" },
  { "If our designs are failing due to the constant rain of changing requirements, it is our designs that are at fault. We must somehow find a way to make our designs resilient to such changes and protect them from rotting.", "", "- Robert C. Martin" },
  { "If programmers were electricians, parallel programmers would be bomb disposal experts. Both cut wires.", "", "- Bartosz Milewski" },
  { "If the code and the comments do not match, possibly both are incorrect.", "", "- Norm Schryer" },
  { "If there is a feature of a language that is sometimes problematic, and if it can be replaced with another feature that is more reliable, then always use the more reliable feature.", "", "- Douglas Crockford" },
  { "If there's only one answer, then this must not be a very interesting topic.", "", "- Ron Jeffries" },
  { "If we’d asked the customers what they wanted, they would have said “faster horses”.", "", "- Henry Ford" },
  { "If you can get today’s work done today, but you do it in such a way that you can’t possibly get tomorrow’s work done tomorrow, then you lose.", "", "- Martin Fowler" },
  { "If you ever talk to a great programmer, you'll find he knows his tools like an artist knows his paintbrushes.", "", "- Bill Gates" },
  { "If you find that you're spending almost all your time on theory, start turning some attention to practical things; it will improve your theories. If you find that you're spending almost all your time on practice, start turning some attention to theoretical things; it will improve your practice.", "", "- Donald Knuth" },
  { "If you hand me code that works perfectly but I can't understand it, then as soon as the requirements change that code is useless. On the other hand, if you give me code that _does not work_ but I can understand it, I can make it work.", "", "It is much more important that your peers can understand the code that you write than the computer can understand the code that you write.", "", "- Robert C. Martin" },
  { "If you need more than 3 levels of indentation, you're screwed anyway, and should fix your program.", "", "- Linus Torvalds" },
  { "If you want more effective programmers, you will discover that they should not waste their time debugging, they should not introduce the bugs to start with.", "", "- Edsger W. Dijkstra" },
  { "If you want to increase your success rate, double your failure rate.", "", "- Thomas Watson Jr" },
  { "If you're actually doing TDD, you're throwing away tests all the time, as your understanding of what the code is changes.", "", "- Kerri Miller" },
  { "If you're afraid to change something it is clearly poorly designed.", "", "- Martin Fowler" },
  { "If you're ever worried about losing some data, just put it after a todo comment in a codebase. Those things never get removed.", "", "- Ólafur Waage" },
  { "If you're having trouble succeeding, fail.", "", "- Kent Beck" },
  { "If you're not failing 90% of the time, then you're probably not working on sufficiently challenging problems.", "", "- Alan Kay" },
  { "If you're willing to restrict the flexibility of your approach, you can almost always do something better.", "", "- John Carmack" },
  { "Imagination is more important than knowledge.", "", "- Albert Einstein" },
  { "In a professional software engineering environment, criticism is almost never personal - it’s usually just part of the process of making a better project. The trick is to make sure you (and those around you) understand the difference between a constructive criticism of someone’s creative output and a flat-out assault against someone’s character.", "", "The latter is useless - it’s petty and nearly impossible to act on. The former can (and should!) be helpful and give guidance on how to improve. And, most important, it’s imbued with respect: the person giving the constructive criticism genuinely cares about the other person and wants them to improve themselves or their work. Learn to respect your peers and give constructive criticism politely. If you truly respect someone, you’ll be motivated to choose tactful, helpful phrasing—a skill acquired with much practice.", "", "- Titus Winters" },
  { "In an effort to keep quality high and make the right calls, you start acting more like a PM than an engineer. It's the easiest way to feel in control. Unfortunately, it also turns you into a bottleneck.", "", "- Lior Neu-ner" },
  { "In many ways, the prism of computer science is harmful for the development of information systems.", "", "- David Heinemeier Hansson (DHH)" },
  { "In preparing for battle I have always found that plans are useless, but planning is indispensable.", "", "- Dwight D. Eisenhower" },
  { "In programming, if someone tells you you're overcomplicating it, they're either 10 steps behind you or 10 steps ahead of you.", "", "- Andrew Clark" },
  { "In programming, the hard part isn't solving problems, but deciding what problems to solve.", "", "- Paul Graham" },
  { "In science if you know what you are doing you should not be doing it. In engineering if you do not know what you are doing you should not be doing it.", "", "- Richard Hamming" },
  { "In science it often happens that scientists say, \"You know that's a really good argument; my position is mistaken\" ...and you never hear that old view from them again... It happens every day. I cannot recall the last time something like that happened in politics or religion.", "", "- Carl Sagan" },
  { "In software, the chain isn't as strong as its weakest link; it's as weak as all the weak links multiplied together.", "", "- Steve McConnell" },
  { "Incorrect documentation is often worse than no documentation.", "", "- Bertrand Meyer" },
  { "Increasingly, people seem to misinterpret complexity as sophistication, which is baffling -- the incomprehensible should cause suspicion rather than admiration.", "", "- Niklaus Wirth" },
  { "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. ...[Therefore,] making it easy to read makes it easier to write.", "", "- Robert C. Martin" },
  { "Inheritance should only be used to model a specialization hierarchy.", "", "- Object-Oriented Design Heuristics" },
  { "Inside every large program, there is a small program trying to get out.", "", "- C.A.R. Hoare" },
  { "Intelligence is the ability to avoid doing work, yet getting the work done.", "", "- Linus Torvalds" },
  { "Invest regularly in your knowledge portfolio.", "", "Make learning a habit.", "", "- The Pragmatic Programmer" },
  { "It can be better to copy a little code than to pull in a big library for one function. Dependency hygiene trumps code reuse.", "", "- Rob Pike" },
  { "It is better to be wrong today than to be wrong tomorrow.", "", "- Ok_Slide4905 (reddit)" },
  { "It is better to do the right problem the wrong way than the wrong problem the right way.", "", "- Richard Hamming" },
  { "It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.", "", "- Alan Perlis" },
  { "It is easier to change the specification to fit the program than vice versa.", "", "- Alan Perlis" },
  { "It is easier to write an incorrect program than understand a correct one. (in other words, it is sometimes helpful to just write it wrong so that you can understand how to write it right)", "", "- Alan Perlis" },
  { "It is foolish to answer a question that you do not understand. It is sad to work for an end that you do not desire.", "", "- George Pólya" },
  { "It is hard to write a simple definition of something as varied as hacking, but I think what these activities have in common is playfulness, cleverness, and exploration. Thus, hacking means exploring the limits of what is possible, in a spirit of playful cleverness. Activities that display playful cleverness have \"hack value\".", "", "- Richard Stallman" },
  { "It seems to me to be important to distinguish a good idea from poor implementations of it.", "", "- Ron Jeffries" },
  { "It was a turning point in my programming career when I realized that I didn't have to win every argument.", "", "- Ward Cunningham" },
  { "It would be a mistake to think that solving problems is a purely intellectual affair; determination and emotions play an important role.", "", "- George Pólya" },
  { "It's OK to figure out murder mysteries, but you shouldn't need to figure out code. You should be able to read it.", "", "- Steve McConnell" },
  { "It's both what you say and the way you say it.", "", "There's no point in having great ideas if you don't communicate them effectively.", "", "- The Pragmatic Programmer" },
  { "It's hard enough to find an error in your code when you're looking for it; it's even harder when you've assumed your code is error-free.", "", "- Steve McConnell" },
  { "It's not at all important to get it right the first time. It's vitally important to get it right the last time.", "", "- Dave Thomas" },
  { "It's painful for most software developers to acknowledge this, because they love code so much, but the best code is no code at all. Every new line of code you willingly bring into the world is code that has to be debugged, code that has to be read and understood, code that has to be supported. Every time you write new code, you should do so reluctantly, under duress, because you completely exhausted all your other options. Code is only our enemy because there are so many of us programmers writing so damn much of it. If you can’t get away with no code, the next best thing is to start with brevity.", "", "If you love writing code — really, truly love to write code — you’ll love it enough to write as little of it as possible.", "", "- Jeff Atwood" },
  { "Iterate the schedule with the code.", "", "Use experience you gain as you implement to refine the project time scales.", "", "- The Pragmatic Programmer" },
  { "Java is to JavaScript as ham is to hamster.", "", "- Jeremy Keith" },
  { "JavaScript is the only language that I'm aware of that people feel they don't need to learn before they start using it.", "", "- Douglas Crockford" },
  { "Just because something is easy to measure doesn't mean it's important.", "", "- DHH" },
  { "Just because the standard provides a cliff in front of you, you are not necessarily required to jump off it.", "", "- Norman Diamond" },
  { "Keep knowledge in plain text.", "", "Plain text won't become obsolete. It helps leverage your work and simplifies debugging and testing.", "", "- The Pragmatic Programmer" },
  { "Keep related data and behavior in one place. Spin off non related information into another class. Move Data Close to Behavior.", "", "- Object-Oriented Design Heuristics" },
  { "Later equals never.", "", "- Le Blanc's Law" },
  { "Learn not to add too many features right away, and get the core idea built and tested.", "", "- Leah Culver" },
  { "Let me remind you that information is not knowledge, knowledge is not wisdom, and wisdom is not foresight. Each grows out of the other, and we need them all.", "", "- Arthur C. Clarke" },
  { "Listen to your inner lizard.", "", "When it feels like your code is pushing back, it's really your subconscious trying to tell you something's wrong.", "", "- The Pragmatic Programmer" },
  { "Machines should work. People should think.", "", "- IBM Polyanna Principle" },
  { "Make everything as simple as possible, but not simpler.", "", "- Albert Einstein" },
  { "Make it easy to reuse.", "", "If it's easy to reuse, people will. Create an environment that supports reuse.", "", "- The Pragmatic Programmer" },
  { "Make it work now, we can always make it complex later.", "", "- ryancoplen (reddit)" },
  { "Make it work, then make it beautiful, then if you really, really have to, make it fast. 90 percent of the time, if you make it beautiful, it will already be fast. So really, just make it beautiful!", "", "- Joe Armstrong" },
  { "Make quality a requirements issue.", "", "Involve your users in determining the project's real quality requirements.", "", "- The Pragmatic Programmer" },
  { "Making code do what it's supposed to do is the easy part. Handling the myriad ways it can go wrong is the real work.", "", "- Aaron Lozier" },
  { "Mathematics is important in programming, but it’s just one of a lot of things that are important. If you overemphasize the math then you underemphasize stuff which might be even more important, such as literacy.", "", "- Douglas Crockford" },
  { "Measure twice, cut once. \"Move fast and break things\" is an oft-repeated trope, especially in startupland. Breaking things is no way to go through life. Move slower to move faster.", "", "- sanduckhan (reddit)" },
  { "Measuring programming progress by lines of code is like measuring aircraft building progress by weight.", "", "- Bill Gates" },
  { "Methods are just functions with a special first argument.", "", "- Andrew Gerrand" },
  { "Minimize coupling between modules.", "", "Avoid coupling by writing \"shy\" code and applying the Law of Demeter.", "", "- The Pragmatic Programmer" },
  { "Model the real world whenever possible.", "", "- Object-Oriented Design Heuristics" },
  { "More computing sins are committed in the name of efficiency (without necessarily achieving it) than for any other single reason - including blind stupidity.", "", "- William Wulf" },
  { "Most errors are introduced during requirements specification." , "", "Daniel T. Barry" },
  { "Most of the biggest problems in software are problems of misconception.", "", "- Rich Hickey" },
  { "Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris.", "", "- Larry Wall" },
  { "Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves.", "", "- Alan Kay" },
  { "Much of the essence of building a program is in fact the debugging of the specification.", "", "- Fred Brooks" },
  { "Much of the excitement we get out of our work is that we don't really know what we are doing.", "", "- Edsger W. Dijkstra" },
  { "My goal is to feel better about a project after a year than I did in the starry-eyed beginning, and TDD helps me achieve this.", "", "- Kent Beck" },
  { "Never discourage anyone who continually makes progress, no matter how slow.", "", "- Plato" },
  { "Never exaggerate your faults. Your friends will attend to that.", "", "- Francis Bacon" },
  { "Nine people can’t make a baby in a month.", "", "- Frederick P. Brooks" },
  { "No matter how far down the wrong road you have gone, turn back now.", "", "- Turkish proverb" },
  { "No matter how slick the demo is in rehearsal, when you do it in front of a live audience the probability of a flawless presentation is inversely proportional to the number of people watching, raised to the power of the amount of money involved.", "", "- Mark Gibbs" },
  { "No matter the circumstance you can always improve. You can always start improving with yourself. You can always start improving today.", "", "- Kent Beck" },
  { "No, you can’t force other people to change. You can, however, change just about everything else. And usually, that’s enough.", "", "- Aaron Swartz" },
  { "Not all change is an improvement, but all improvement requires change.", "", "- Larry Garfield" },
  { "Not all eyes that notice bugs in Open Source code belong to saints who will report or repair them in the interest of the public good.", "", "- Martin Fowler" },
  { "Nothing is more permanent than a temporary solution.", "", "- Russian Proverb" },
  { "Now I'm a pretty lazy person and am prepared to work quite hard in order to avoid work.", "", "- Martin Fowler" },
  { "Object-oriented programming is an exceptionally bad idea which could only have originated in California.", "", "- Edsger W. Dijkstra" },
  { "Observe that for the programmer, as for the chef, the urgency of the patron may govern the scheduled completion of the task, but it cannot govern the actual completion. An omelette, promised in two minutes, may appear to be progressing nicely. But when it has not set in two minutes, the customer has two choices - wait or eat it raw. Software customers have had the same choices.", "", "- Fred Brooks" },
  { "Once a new technology rolls over you, if you're not part of the steamroller you're part of the road.", "", "- Stewart Brand" },
  { "Once you stop learning you start dying.", "", "- Albert Einstein" },
  { "One accurate measurement is worth a thousand expert opinions.", "", "- Grace Hopper" },
  { "One of my most productive days was throwing away 1000 lines of code.", "", "- Ken Thompson" },
  { "One of the best programming skills you can have is knowing when to walk away for awhile.", "", "- Oscar Godson" },
  { "One of the great skills in using any language is knowing what not to use, what not to say. There's that simplicity thing again.", "", "- Ron Jeffries" },
  { "One of the most underrated secrets to success is to start before you’re ready.", "", "- Marie Forleo" },
  { "One of the things I’ve been pushing is code reading. I think that is the most useful thing that a community of programmers can do for each other—spend time on a regular basis reading each other’s code.", "", "- Douglas Crockford" },
  { "Optimism is an occupational hazard of programming; feedback is the treatment.", "", "- Kent Beck" },
  { "Optimization hinders evolution.", "", "- Alan Perlis" },
  { "Overnight success takes 30 years.", "", "- Sophie Wilson, Early designer of ARM instruction set and lead dev of BBC BASIC" },
  { "Pair once, then step back.", "", "The next time something gnarly comes up, co-solve for an hour with the right person, then step back. Next time, they own it.", "", "- Lior Neu-ner" },
  { "Part of what makes programming difficult is most of the time we’re doing stuff we’ve never done before.", "", "- Douglas Crockford" },
  { "Patterns mean \"I have run out of language.\" ", "", "- Rich Hickey" },
  { "Paying attention to how things work without thinking about how they fail is a recipe for disaster.", "", "- Cory Doctorow" },
  { "People are inherently imperfect - we like to say that humans are mostly a collection of intermittent bugs. But before you can understand the bugs in your coworkers, you need to understand the bugs in yourself.", "", "We're going to ask you to think about your own reactions, behaviors, and attitudes - and in return, we hope you gain some real insight into how to become a more efficient and successful software engineer who spends less energy dealing with people-related problems and more time writing great code.", "", "- Titus Winters" },
  { "People have an enormous tendency to resist change. They love to say, \"We've always done it this way.\" I try to fight that.", "", "- Grace Hopper" },
  { "People under pressure don’t work better; they just work faster.", "", "- Tom DeMarco" },
  { "Perfecting oneself is as much unlearning as it is learning.", "", "- Edsger Dijkstra" },
  { "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.", "", "- Antoine de Saint-Exupéry" },
  { "Playfully doing something difficult, whether useful or not, that is hacking.", "", "- Richard M. Stallman" },
  { "Prefer interfaces to express polymorphism.", "", "Interfaces make polymorphism explicit without the coupling introduced by inheritance.", "", "- The Pragmatic Programmer" },
  { "Profanity is the one language all programmers know best.", "", "- Anonymous" },
  { "Program building is an entropy-decreasing process, hence inherently metastable. Program maintenance is an entropy-increasing process, and even its most skillful execution only delays the subsidence of the system into unfixable obsolescence.", "", "- Fred Brooks" },
  { "Program close to the problem domain.", "", "Design and code in your user's language.", "", "- The Pragmatic Programmer" },
  { "Programmers are a very curious group. They arose very quickly, became a profession very rapidly, and were all too soon infected with a certain amount of resistance to change. The very programmers whom I have heard almost castigate a customer because he would not change his system of doing business are the same people who at times walk into my office and say, \"But we have always done it this way.\" It is for this reason that I now have a counter-clockwise clock hanging in my office.", "", "- Grace Hopper" },
  { "Programmers are not to be measured by their ingenuity and their logic but by the completeness of their case analysis.", "", "- Alan Perlis" },
  { "Programmers are often angry because they’re often scared.", "", "- Paul Ford" },
  { "Programmers must avoid leaving false clues that obscure the meaning of code.", "", "- Robert C. Martin" },
  { "Programming is 11/12ths Thinking.", "", "- Tim Ottinger" },
  { "Programming is a good job if you want to spend all of your time at the absolute limit of your capacity to understand things.", "", "- @Pentadact" },
  { "Programming is not about typing, it's about thinking.", "", "- Rich Hickey" },
  { "Programming is not easy like Sunday morning, it is silent poetry.", "", "- Waseem Latif" },
  { "Programming is the art of telling another human being what one wants the computer to do.", "", "- Donald Knuth" },
  { "Programming isn't about what you know; it's about what you can figure out.", "", "- Chris Pine" },
  { "Programming requires more concentration than other activities. It's the reason programmers get upset about 'quick interruptions' - such interruptions are tantamount to asking a juggler to keep three balls in the air and hold your groceries at the same time.", "", "- Steve McConnell" },
  { "Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the universe trying to build bigger and better idiots. So far, the universe is winning.", "", "- Rick Cook" },
  { "Programming, it turns out, is hard. The fundamental rules are typically simple and clear. But programs built on top of these rules tend to become complex enough to introduce their own rules and complexity. You’re building your own maze, in a way, and you might just get lost in it.", "", "- Marijn Haverbeke" },
  { "Programs must be written for people to read, and only incidentally for machines to execute.", "", "- Harold Abelson, Gerald Jay" },
  { "Programs, like people, get old. We can’t prevent ageing, but we can understand its causes, limit its effects and reverse some of the damage.", "", "- Mario Fusco" },
  { "Prototype to learn.", "", "Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.", "", "- The Pragmatic Programmer" },
  { "Provide options, don't make lame excuses.", "", "Instead of excuses, provide options. Don't say it can't be done; explain what can be done.", "", "- The Pragmatic Programmer" },
  { "Pull requests should be as small as possible and as large as necessary.", "", "- Unknown" },
  { "Push decisions down.", "", "When someone asks, \"Should we do X or Y?\" reply with, \"What do you think and why?\". Ship their answer if it's 80% as good as yours. This builds trust and confidence.", "", "- Lior Neu-ner" },
  { "Pushing [a developer] for a lower dev estimate is like negotiating better weather with a meteorologist." , "", "- Björn Brynjar Jónsson" },
  { "Question: How does a large software project get to be one year late?", "", "Answer: One day at a time!", "", "- Fred Brooks" },
  { "Raise your quality standards as high as you can live with, avoid wasting your time on routine problems, and always try to work as closely as possible at the boundary of your abilities. Do this, because it is the only way of discovering how that boundary should be moved forward.", "", "- Edsger Dijkstra" },
  { "Rarely is anyone thanked for the work they did to prevent the disaster that didn't happen.", "", "- Mikko Hypponen" },
  { "Ready, fire, aim: the fast approach to software development. Ready, aim, aim, aim, aim: the slow approach to software development.", "", "- Anonymous" },
  { "Real knowledge is to know the extent of one's ignorance.", "", "- Confucius" },
  { "Really good developers do 90% or more of the work before they ever touch the  keyboard; really understanding the requirements and devising an appropriate solution.", "", "- Unknown" },
  { "Refactor early, refactor often.", "", "Just as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem.", "", "- The Pragmatic Programmer" },
  { "Refuctoring — the process of taking a well-designed piece of code and, through a series of small, reversible changes, making it completely unmaintainable by anyone except yourself.", "", "- Jason Gorman" },
  { "Remember the big picture.", "", "Don't get so engrossed in the details that you forget to check what’s happening around you.", "", "- The Pragmatic Programmer" },
  { "Responsibility cannot be assigned; it can only be accepted. If someone tries to give you responsibility, only you can decide if you are responsible or if you aren't.", "", "- Kent Beck" },
  { "Reusing pieces of code is liked picking off sentences from other people's stories and trying to make a magazine article.", "", "- Bob Frankston" },
  { "Rules of Optimization:", "1. Don't do it", "2. (for experts only) Don't do it yet", "", "- Michael A. Jackson" },
  { "Sharing knowledge is the most fundamental act of friendship. Because it is a way you can give something without loosing something.", "", "- Richard Stallman" },
  { "Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration.", "", "- Stan Kelly-Bootle" },
  { "Simple doesn't mean stupid. Thinking that it does, does.", "", "- Paul Krugman" },
  { "Simplicity and elegance are unpopular because they require hard work and discipline to achieve and education to be appreciated.", "", "- Edsger W. Dijkstra" },
  { "Simplicity does not precede complexity, but follows it.", "", "- Alan Perlis" },
  { "Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.", "", "- Edsger W. Dijkstra" },
  { "Simplicity is prerequisite for reliability.", "", "- Edsger W. Dijkstra" },
  { "Simplicity only makes sense in context. If I’m writing a parser with a team that understands parser generators, then using a parser generator is simple. If the team doesn’t know anything about parsing and the language is simple, a recursive descent parser is simpler.", "", "- Kent Beck" },
  { "Size almost always involves complexity, and complexity confuses programmers. Confused programmers, in turn, introduce mistakes (bugs) into programs.", "", "- Marijn Haverbeke" },
  { "Smart data structures and dumb code works a lot better than the other way around.", "", "- Eric S. Raymond" },
  { "Snow is so beautiful, it doesn't have to be useful.", "", "- Richard Stallman" },
  { "So much complexity in software comes from trying to make one thing do two things.", "", "- Ryan Singer" },
  { "So-called \"smart\" software usually is the worst you can imagine.", "", "- Christian Neukirchen" },
  { "Software being \"Done\" is like lawn being \"Mowed\".", "", "- Jim Benson" },
  { "Software development is a game of insight, and insight comes to the prepared, rested, relaxed mind.", "", "- Kent Beck" },
  { "Software development is not a fabrication operation, but a design operation. Once the initial design is done, all the duplication is done by machines at nearly zero cost.", "", "- Robert C. Martin" },
  { "Software is hard.", "", "- Donald Knuth" },
  { "Some folks talk about ending the day with a clean check in.", "", "I'm increasingly finding it better to end with a failing test; it helps me regain context the next morning.", "", "- Dave Thomas" },
  { "Some things are better done than described.", "", "Don't fall into the specification spiral - at some point you need to start coding.", "", "- The Pragmatic Programmer" },
  { "Sometimes the problem is to discover what the problem is.", "", " - Gordon Glegg" },
  { "Sometimes there is a silver bullet for boosting software engineering productivity. But you need to shoot the right person.", "", "- Michael Stal" },
  { "Sometimes when you fill a vacuum, it still sucks.", "", "- Dennis Ritchie" },
  { "Sometimes you need to prevent tech debt right under the noses of the big wigs - factor it into your estimates without explicitly stating it.", "", "- Llebac (reddit)" },
  { "Start when you're ready.", "", "You've been building experience all your life. don't ignore niggling doubts.", "", "- The Pragmatic Programmer" },
  { "Steadfastness is a noble quality, but unguided by knowledge or humility, it becomes rashness, or obstinacy.", "", "- Aaron Swartz" },
  { "Stop yourself every time you say I prefer. Your opinion doesn’t matter to anyone, even yourself. Look at things objectively.", "", "Give yourself a refactor/change budget. Prioritize and be pragmatic.", "", "- National_Count_4196 (reddit)" },
  { "Subclasses should not use directly data of superclasses.", "", "- Object-Oriented Design Heuristics" },
  { "Such is modern computing: everything simple is made too complicated because it's easy to fiddle with; everything complicated stays complicated because it's hard to fix.", "", "- Rob Pike" },
  { "Talk is cheap. Show me the code.", "", "- Linus Torvalds" },
  { "Tell, don't ask.", "", "Don't get values from an object, transform them, and stick them back. Make the object do the work.", "", "- The Pragmatic Programmer" },
  { "Telling a programmer there's already a library to do X is like telling a songwriter there's already a song about love.", "", "- Pete Cordell" },
  { "Terrible code is not a good excuse to be mean, because terrible code is not well-correlated with having been written by terrible people.", "", "- Geepaw Hill" },
  { "Test early. Test often. Test automatically.", "", "Tests that run with every build are much more effective than test plans that sit on a shelf.", "", "- The Pragmatic Programmer" },
  { "Test it manually. Even if you wrote and ran automated tests, test it manually at least once before you ask for a review. Record yourself testing it manually. You’ll be surprised by what you find.", "", "- Thorsten Ball" },
  { "Test state coverage, not code coverage.", "", "Identify and test significant program states. Testing just lines of code isn't enough.", "", "- The Pragmatic Programmer" },
  { "Test your software, or your users will.", "", "Test ruthlessly. Don't make your users find bugs for you.", "", "- The Pragmatic Programmer" },
  { "Testing Is Not About Finding Bugs.", "", "A test is a perspective into your code, and gives you feedback about its design, api, and coupling.", "", "- The Pragmatic Programmer" },
  { "Testing leads to failure, and failure leads to understanding.", "", "- Burt Rutan" },
  { "Testing shows the presence, not the absence of bugs.", "", "- Edsger W Dijkstra" },
  { "That hardly ever happens is another way of saying 'it happens'.", "", "- Douglas Crockford" },
  { "That was a problem for future me and now I am future me.", "", "- Tom Scott" },
  { "The Programmer's Creed: We do these things not because they are easy, but because we thought they were going to be easy.", "", "- @Pinboard" },
  { "The Three Laws of TDD:", "", "(1) You may not write production code until you have written a failing unit test.", "(2) You may not write more of a unit test than is sufficient to fail, and not compiling is failing.", "(3) You may not write more production code than is sufficient to pass the currently failing test.", "", "- Robert C. Martin" },
  { "The absence of limitations is the enemy of art.", "", "- Orson Welles" },
  { "The act of describing a program in unambiguous detail and the act of programming are one and the same.", "", "- Kevlin Henney" },
  { "A test isn’t proof that something is correct, it's proof that one piece of code behaves the way another piece of code thinks it should behave.", "", "- Reddit /u/untypedfuture" },
  { "The amount of energy necessary to refute bullshit is an order of magnitude bigger than to produce it.", "", "- Alberto Brandolini" },
  { "The art of programming is the art of organizing complexity, of mastering multitude and avoiding its bastard chaos as effectively as possible.", "", "- E.W. Dijkstra" },
  { "The best learners are the people who push through the discomfort of being objectively bad at something.", "", "- Tommy Collison" },
  { "The best performance improvement is the transition from the nonworking state to the working state.", "", "- John Ousterhout" },
  { "The best programs are the ones written when the programmer is supposed to be working on something else.", "", "- Melinda Varian" },
  { "The best programs are written so that computing machines can perform them quickly and so that human beings can understand them clearly. A programmer is ideally an essayist who works with traditional aesthetic and literary forms as well as mathematical concepts, to communicate the way that an algorithm works and to convince a reader that the results will be correct.", "", "- Donald Knuth" },
  { "The best reaction to “this is confusing, where are the docs” is to rewrite the feature to make it less confusing, not write more docs.", "", "- Jeff Atwood" },
  { "The best way to get the right answer on the internet is not to ask a question; it's to post the wrong answer.", "", "- Cunningham's Law" },
  { "The best way to have a good idea is to have a lot of ideas.", "", " - Linus Pauling" },
  { "The best way to prepare [to be a programmer] is to write programs, and to study great programs that other people have written. In my case, I went to the garbage cans at the Computer Science Center and fished out listings of their operating system.", "", "- Bill Gates" },
  { "The biggest issue on software teams is making sure everyone understands what everyone else is doing.", "", "- Martin Fowler" },
  { "The central enemy of reliability is complexity.", "", "- Daniel Geer" },
  { "The cleaner and nicer the program, the faster it's going to run. And if it doesn't, it'll be easy to make it fast.", "", "- Joshua Bloch" },
  { "The code you write makes you a programmer. The code you delete makes you a good one. The code you don't have to write makes you a great one.", "", "- Mario Fusco" },
  { "The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility, and among other things he avoids clever tricks like the plague.", "", "- E. W. Dijkstra" },
  { "The complexity of software is an essential property, not an accidental one. Hence descriptions of a software entity that abstract away its complexity often abstract away its essence.", "", "- Fred Brooks" },
  { "The computing scientist's main challenge is not to get confused by the complexities of his own making.", "", "- Edsger W. Dijkstra" },
  { "The craft of programming begins with empathy, not formatting or languages or tools or algorithms or data structures.", "", "- Kent Beck" },
  { "The default movement on a software project should be in the direction of taking elements of the software away to make it simpler rather than adding elements to make it more complex.", "", "- Steve McConnell" },
  { "The difference between theory and practice is smaller in theory than in practice.", "", "- Anonymous" },
  { "The efficiency of the code decreases with an increase in the number of people working on the program. The most efficient programs are written by a single person.", "", "- Charles Simonyi" },
  { "The enjoyment of one's tools is an essential ingredient of successful work.", "", "- Donald Knuth" },
  { "The essence of XML is this: the problem it solves is not hard, and it does not solve the problem well.", "", "- Phil Wadler" },
  { "The fact that you got it working is only half the job. Once the code works, that's when you have to clean it. No one writes clean code first.", "", "- Robert C. Martin" },
  { "The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.", "", "- Jeff Atwood" },
  { "The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that.", "", "- Robert C. Martin" },
  { "The first step of any project is to grossly underestimate its complexity and difficulty.", "", "- Nicoll Hunt" },
  { "The function of good software is to make the complex appear to be simple.", "", "- Bjarne Stroustrup" },
  { "The fundamental problem with program maintenance is that fixing a defect has a substantial (20-50 percent) chance of introducing another. So the whole process is two steps forward and one step back.", "", "- Fred Brooks" },
  { "The good news about computers is that they do what you tell them to do. The bad news is that they do what you tell them to do.", "", "- Ted Nelson" },
  { "The greatest performance improvement of all is when a system goes from not-working to working.", "", "- John Ousterhout" },
  { "The hardest part of design is keeping features out.", "", "- Don Norman" },
  { "The ideal numbers of arguments for a function is zero (niladic). Next comes one (monadic), followed closely by two (dyadic). Three arguments (triadic) should be avoided where possible. More than three (polyadic) requires very special justification ‐ and then shouldn't be used anyway.", "", "- Robert C. Martin" },
  { "The important thing is not to stop questioning. Curiosity has its own reason for existing.", "", "- Albert Einstein" },
  { "The key is to acknowledge from the start that you have no idea how this will grow. When you accept that you don't know everything, you begin to design the system defensively... You should spend most of your time thinking about interfaces rather than implementations.", "", "- Nicholas Zakas" },
  { "The key to making programs fast is to make them do practically nothing.", "", "- Mike Haertel" },
  { "The letter I have written today is longer than usual because I lacked the time to make it shorter.", "", "- Blaise Pascal" },
  { "The lurking suspicion that something could be simplified is the world's richest source of rewarding challenges.", "", "- Edsger W. Dijkstra" },
  { "The man who asks a question is a fool for a minute. The man who does not ask is a fool for life.", "", "- Confucius" },
  { "The manager's function is not to make people work, but to make it possible for people to work.", "", "- Tom DeMarco" },
  { "The moral is this: do not underestimate the power of playing the social game. It’s not about tricking or manipulating people; it’s about creating relationships to get things done. Relationships always outlast projects. When you’ve got richer relationships with your coworkers, they’ll be more willing to go the extra mile when you need them.", "", "- Titus Winters" },
  { "The most damaging phrase in the language is: 'It's always been done that way.'", "", "- Grace Hopper" },
  { "The most dangerous phrase in the language is, \"We've always done it this way.\"", "", "- Grace Hopper" },
  { "The most effective debugging tool is still careful thought, coupled with judiciously placed print statements.", "", "- Brian W. Kernighan" },
  { "The most exciting phrase to hear in science, the one that heralds new discoveries, is not 'Eureka!' but 'That's funny...'", "", "- Isaac Asimov" },
  { "The most important single aspect of software development is to be clear about what you are trying to build.", "", "- Bjarne Stroustrup" },
  { "The most valuable thing you can make is a mistake - you can't learn anything from being perfect.", "", "- Adam Osborne" },
  { "The object-oriented model makes it easy to build up programs by accretion. What this often means, in practice, is that it provides a structured way to write spaghetti code.", "", "- Paul Graham" },
  { "The object-oriented version of 'Spaghetti code' is, of course, 'Lasagna code'. (Too many layers).", "", "- Roberto Waltman" },
  { "The only way for errors to occur in a program is by being put there by the author. No other mechanisms are known.", "", "- Harlan Mills" },
  { "The only way of discovering the limits of the possible is to venture a little way past them into the impossible.", "", "- Arthur C. Clarke" },
  { "The only way to learn a new programming language is by writing programs in it.", "", "- Dennis M. Ritchie" },
  { "The prisoner falls in love with his chains.", "", "- Edsger W. Dijkstra" },
  { "The proper use of comments is to compensate for our failure to express ourself in code.", "", "- Robert C. Martin" },
  { "The purpose of abstracting is not to be vague, but to create a new semantic level in which one can be absolutely precise.", "", "- Edsger W Dijkstra" },
  { "The question of whether computers can think is like the question of whether submarines can swim.", "", "- Edsger W. Dijkstra" },
  { "The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.", "", "- Donald Knuth" },
  { "The real problem with throwaway code comes when it isn't thrown away.", "", "- Joseph Yoder" },
  { "The secret to optimization is changing the problem to make it easier to optimize.", "", "- John Carmack" },
  { "The smartest thing you can do as a programmer is realize how stupid you are, and make accommodations.", "", "- Jason Swett" },
  { "The sooner you start to code, the longer the program will take.", "", "- Roy Carlson" },
  { "The standard rule is, when you're in a hole, stop digging; that seems not to apply [to] software nowadays.", "", "- Ron Minnich" },
  { "The tools we use have a profound and devious influence on our thinking habits, and therefore on our thinking abilities. (In other words, think outside of the box of your tools)", "", "- Edsger W. Dijkstra" },
  { "The trouble with quick and dirty is that dirty remains long after quick has been forgotten.", "", "- Steve McConnell" },
  { "The value of a prototype is in the education it gives you, not in the code itself.", "", "- Alan Cooper" },
  { "The wages of sin is debugging.", "", "- Ron Jeffries" },
  { "The way to arrest entropy in software is to refactor it.", "", "- Joseph Yoder" },
  { "Theory and practice sometimes clash. And when that happens, theory loses. Every single time.", "", "- Linus Torvalds" },
  { "There are many terrible mistakes to make in program design, so go ahead and make them so that you understand them better.", "", "- Marijn Haverbeke" },
  { "There are no final decisions.", "", "No decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change.", "", "- The Pragmatic Programmer" },
  { "There are only two hard problems in distributed systems:", "2. Exactly-once delivery", "1. Guaranteed order of messages", "2. Exactly-once delivery", "", "- Matthias Verraes" },
  { "There are only two industries that refer to their customers as \"users\".", "", "- Edward Tufte" },
  { "There are some basic techniques to control complexity. Fundamentally, I divide and conquer, break things down, and try to write reasonably precise descriptions of what each piece is supposed to do.", "", "- Butler Lampson" },
  { "There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.", "", "- Leslie Lamport" },
  { "There are two ways to write error-free programs; only the third works.", "", "- Alan J. Perlis" },
  { "There is not now, nor has there ever been, nor will there ever be, any programming language in which it is the least bit difficult to write bad code.", "", "- Flon's Law" },
  { "There is nothing quite so useless as doing with great efficiency something that should not be done at all.", "", "- Alan Kay" },
  { "They did not know it was impossible, so they did it!", "", "- Mark Twain" },
  { "Think about your work.", "", "Turn off the autopilot and take control. Constantly critique and appraise your work.", "", "- The Pragmatic Programmer" },
  { "Think deeply about things. Don’t just go along because that’s the way things are or that’s what your friends say. Consider the effects, consider the alternatives, but most importantly, just think.", "", "- Aaron Swartz" },
  { "Think through the edge cases. That doesn’t mean you have to handle them all right away, but you should have an answer to them.", "", "- Thorsten Ball" },
  { "Think twice, code once." },
  { "Those that can, do. Those that can't, complain.", "", "- Linus Torvalds" },
  { "Three strikes, then refactor.", "", "- Martin Fowler" },
  { "To be a programmer is to develop a carefully managed relationship with error. There’s no getting around it. You either make your accommodations with failure, or the work will become intolerable.", "", "- Ellen Ullman" },
  { "To come up with thoughtful commits, consider the following:", "", "* Why have I made these changes?", "* What effect have my changes made?", "* Why was the change needed?", "* What are the changes in reference to?", "", "- Natalie Pina " },
  { "To iterate is human, to recurse divine.", "", "- L. Peter Deutsch" },
  { "To me programming is more than an important practical art. It is also a gigantic undertaking in the foundations of knowledge.", "", "- Grace Hopper" },
  { "To understand recursion, one must first understand recursion.", "", "- Stephen Hawking" },
  { "Treat your code like poetry and take it to the edge of the bare minimum.", "", "- Ilyo" },
  { "Truth can only be found in one place: the code.", "", "- Robert C. Martin" },
  { "Twenty percent of all input forms filled out by people contain bad data.", "", "- Dennis Ritchie" },
  { "Typing is no substitute for thinking.", "", "- Richard Hamming" },
  { "Understand what problem you’re solving. Knowing why you’re doing something is a requirement to knowing whether you’re actually solving the problem.", "", "- Thorsten Ball" },
  { "Unix was not designed to stop its users from doing stupid things, as that would also stop them from doing clever things." },
  { "Upskill with micro-talks. Ask people who've just mastered something to give a 5-minute lightning talk in the next team meeting.", "", "- Lior Neu-ner" },
  { "Use a project glossary.", "", "Create and maintain a single source of all the specific terms and vocabulary for a project.", "", "- The Pragmatic Programmer" },
  { "Use a single editor well.", "", "The editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable.", "", "- The Pragmatic Programmer" },
  { "Use assertions to prevent the impossible.", "", "If it can't happen, use assertions to ensure that it won't. Assertions validate your assumptions. Use them to protect your code from an uncertain world.", "", "- The Pragmatic Programmer" },
  { "Use exceptions for exceptional problems.", "", "Exceptions can suffer from all the readability and maintainability problems of classic spaghetti code. Reserve exceptions for exceptional things.", "", "- The Pragmatic Programmer" },
  { "Use saboteurs to test your testing.", "", "Introduce bugs on purpose in a separate copy of the source to verify that testing will catch them.", "", "- The Pragmatic Programmer" },
  { "Use tracer bullets to find the target.", "", "Tracer bullets let you home in on your target by trying things and seeing how close they land.", "", "- The Pragmatic Programmer" },
  { "Users of a class must be dependent on its public interface, but a class should not be dependent on its users.", "", "- Object-Oriented Design Heuristics" },
  { "Walking on water and developing software from a specification are easy if both are frozen.", "", "- Edward V. Berard" },
  { "We are all shaped by the tools we use, in particular: the formalisms we use shape our thinking habits, for better or for worse, and that means that we have to be very careful in the choice of what we learn and teach, for unlearning is not really possible.", "", "- Edsger Dijkstra" },
  { "We are just as proud of what our product don't do as we are of what they do.", "", "- 37Signals" },
  { "We're programmers. Programmers are, in their hearts, architects, and the first thing they want to do when they get to a site is to bulldoze the place flat and build something grand. We're not excited by incremental renovation: tinkering, improving, planting flower beds.", "", "There's a subtle reason that programmers always want to throw away the code and start over. The reason is that they think the old code is a mess. And here is the interesting observation: they are probably wrong. The reason that they think the old code is a mess is because of a cardinal, fundamental law of programming:", "", "It's harder to read code than to write it.", "", "- Joel Spolsky" },
  { "Weeks of coding can save you hours of planning.", "", "- Unknown" },
  { "Well over half of the time you spend working on a project (on the order of 70 percent) is spent thinking, and no tool, no matter how advanced, can think for you. Consequently, even if a tool did everything except the thinking for you - if it wrote 100 percent of the code, wrote 100 percent of the documentation, did 100 percent of the testing, burned the CD-ROMs, put them in boxes, and mailed them to your customers - the best you could hope for would be a 30 percent improvement in productivity. In order to do better than that, you have to change the way you think.", "", "- Fred Brooks" },
  { "What I cannot build, I do not understand.", "", "- Richard Feynman" },
  { "What one programmer can do in one month, two programmers can do in two months.", "", "- Frederick P. Brooks" },
  { "When I am working on a problem I never think about beauty. I think only how to solve the problem. But when I have finished, if the solution is not beautiful, I know it is wrong.", "", "- Buckminster Fuller" },
  { "When a distinguished but elderly scientist states that something is possible, he is almost certainly right. When he states that something is impossible, he is very probably wrong.", "", "- Arthur C. Clarke" },
  { "When given a choice in an object-oriented design between a containment relationship and an association relationship, choose the containment relationship.", "", "- Object-Oriented Design Heuristics" },
  { "When in doubt, leave it out.", "", "- Joshua Bloch" },
  { "When program developers are not territorial about their code and encourage others to look for bugs and potential improvements, progress speeds up dramatically.", "", "- Gerald Weinberg" },
  { "When the organization resists the positive change you are promoting, let them fail and don't fight fires for them.", "", "- Llebec (reddit)" },
  { "When there is no type hierarchy you don’t have to manage the type hierarchy.", "", "- Rob Pike" },
  { "When we focus on building an intuition, we don't need to memorize rules. We can rely on our mental model to come up with the right answer. It's wayyy more practical.", "", "- Josh W. Comeau" }, -- https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/
  { "When you choose not to care about complexity, you're merely pushing it onto other developers in your org. Ops people, your customers, someone. Now they have to work around your assumptions to make sure everything keeps running smoothly.", "", "- fasterthanli.me" },
  { "When you come across a stumbling block because the code doesn't quite fit anymore, or you notice two things that should really be merged, or anything else at all strikes you as being \"wrong\", don't hesitate to change it. There's no time like the present.", "", "- Andy Hunt, Dave Thomas" },
  { "When you need to make a change, first make the change easy, then make the change.", "", "- Kent Beck" },
  { "When you write a program, think of it primarily as a work of literature. You're trying to write something that human beings are going to read. Don't think of it primarily as something a computer is going to follow. The more effective you are at making your program readable, the more effective it's going to be: You'll understand it today, you'll understand it next week, and your successors who are going to maintain and modify it will understand it.", "", "- Donald Knuth" },
  { "When your team isn't yet confident or experienced enough, handling things yourself feels like the fastest way to get things done. But over time, it teaches your team to escalate rather than solve. What saved time in the short term starts costing you in the long run.", "", "- Lior Neu-ner" },
  { "Whenever I have to think to understand what the code is doing, I ask myself if I can refactor the code to make that understanding more immediately apparent.", "", "- Martin Fowler" },
  { "Why do we make the mess? What drives us to make the mess in the first place? Because we want to go fast.", "", "- Robert C. Martin" },
  { "Why do we never have time to do it right, but always have time to do it over?", "", "- Jack Bergman" },
  { "Why is programming fun?", "", "First is the sheer joy of making things.", "", "Second is the pleasure of making things that are useful to other people.", "", "Third is the fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work in subtle cycles.", "", "Fourth is the joy of always learning, which springs from the non-repeating nature of the task.", "", "Finally, there is the delight of working in such a tractable medium. The programmer, like the poet, works only slightly removed from pure thought-stuff.", "", "- Fred Brooks: The Mythical Man-Month" },
  { "Within a computer, natural language is unnatural.", "", "- Alan Perlis" },
  { "Without planning, we are individuals with haphazard connections and effectiveness. We are a team when we plan and work in harmony.", "", "- Kent Beck" },
  { "Work with a user to think like a user.", "", "It's the best way to gain insight into how the system will really be used.", "", "- The Pragmatic Programmer" },
  { "Would you rather test first or debug later?", "", "- Robert C. Martin" },
  { "Write code that is easy to delete, not easy to extend.", "", "- tef (programming is terrible blog)" },
  { "Write code that writes code.", "", "Code generators increase your productivity and help avoid duplication.", "", "- The Pragmatic Programmer" },
  { "Write shy code - modules that don't reveal anything unnecessary to other modules and that don't rely on other modules' implementations.", "", "- Andy Hunt, Dave Thomas" },
  { "Write tests until fear is transformed into boredom.", "", "- Kent Beck" },
  { "You can learn more from failure than success. In failure you're forced to find out what part did not work. But in success you can believe everything you did was great, when in fact some parts may not have worked at all. Failure forces you to face reality.", "", "- Fred Brooks" },
  { "You can't write perfect software.", "", "Software can't be perfect. Protect your code and users from the inevitable errors.", "", "- The Pragmatic Programmer" },
  { "You have agency.", "", "It's your life. Grab hold of it and make it what you want.", "", "- The Pragmatic Programmer" },
  { "You haven't mastered a tool until you understand when it should not be used.", "", "- Kelsey Hightower" },
  { "You know you are working on clean code when each routine you read turns out to be pretty much what you expected.", "", "- Ward Cunningham" },
  { "You might not think that programmers are artists, but programming is an extremely creative profession. It's logic-based creativity.", "", "- John Romero" },
  { "You never finish a program, you just stop working on it." },
  { "You see the fingers flying over the keyboard; you don't see the hours spent in talking to users, discussing the problems with coworkers, doing research and thinking the problems through.", "", "- Unknown" },
  { "You should name a variable using the same care with which you name a first-born child.", "", "- Jim Coplien" },
  { "You teach me, I forget. You show me, I remember. You involve me, I understand.", "", "- Xunzi" },
  { "Your code will eventually have its assumptions challenged and stop working.", "", "- /u/the7key" },
  { "Your mind is programmable – if you're not programming your mind someone else will program it for you.", "", "- Jeremy Hammond" },
  { "Your task is not to foresee the future, but to enable it.", "", "- Antoine de Saint Exupéry" },
}

local memoized_quote = nil

M.random = function()
  local random_elem = function(tb)
      local keys = {}
      for k in pairs(tb) do table.insert(keys, k) end
      if memoized_quote == nil then
        memoized_quote = tb[keys[math.random(#keys)]]
      end
      return memoized_quote
  end
  -- return M.quotes[math.random(#M.quotes)]

  return random_elem(M.quotes)
end

return M
