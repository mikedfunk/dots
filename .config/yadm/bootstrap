#!/usr/bin/env zsh

_log_info() { echo -e "$(tput setaf 2)$(tput rev)$(tput bold) \xE2\x9C\x93 $1 $(tput sgr0)"; }

system_type=$(uname -s)

_change_shell_to_zsh() {
    which_zsh=$(which zsh)
    if ! [ "$SHELL" = "$which_zsh" ]; then
        _log_info "Changing shell to zsh"
        chsh -s "$which_zsh" $USER
    fi
}

_create_code_dir() {
    _log_info "Creating code directory if missing"
    mkdir -p "$HOME/Code"
}

_mac_xcode_command_line_tools() {
    if [ "$system_type" = "Darwin" ]; then
        _log_info "Installing mac xcode command line tools if missing"
        xcode-select --install || true
    fi
}

_install_homebrew() {
    if ! command -v brew &>/dev/null; then
        _log_info "Install homebrew"
        yes | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
}

_install_upgrade_homebrew_packages() {
    _log_info "Installing/upgrading homebrew packages"
    cd "$HOME" || return
    HOMEBREW_BUNDLE_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/homebrew/Brewfile" brew bundle
    cd - || return
}

_update_mise_plugins() {
    _log_info "Updating mise plugins"
    mise plugin update --yes
}

_install_and_upgrade_mise_dependencies() {
    _log_info "Installing mise dependencies"
    cd "$HOME" || return
    mise install --yes
    mise upgrade --yes
    cd - || return
}

_decrypt_yadm_files() {
    if ! [ -f "$HOME"/.saatchirc ]; then
        _log_info "Decrypting yadm files"
        yadm decrypt
    fi
}

_install_and_configure_php_81_extensions() {
    _log_info "Installing and configuring php 8.1 extensions"
    cd "$HOME" || return
    mise use --global php-brew@8.1
    pecl list | grep --quiet memcached || (yes "" | pecl install memcached)
    pecl list | grep --quiet imagick || (yes "" | pecl install imagick)
    pecl list | grep --quiet xdebug || (yes "" | pecl install xdebug)
    xdebug_config_file="$(brew --prefix)"/etc/php/8.1/conf.d/04_xdebug.ini
    if ! grep --quiet 'xdebug' "$xdebug_config_file"; then
        cat <<'EOF' >>"$xdebug_config_file"
[xdebug]
xdebug.cli_color=1
xdebug.show_local_vars=1
EOF
    fi
    mise use --global php-brew@8.4
    cd - || return
}

_install_and_configure_php_84_extensions() {
    _log_info "Installing and configuring php 8.4 extensions"
    cd "$HOME" || return
    pecl list | grep --quiet memcached || (yes "" | pecl install memcached)
    pecl list | grep --quiet imagick || (yes "" | pecl install imagick)
    pecl list | grep --quiet xdebug || (yes "" | pecl install xdebug)
    xdebug_config_file="$(brew --prefix)"/etc/php/8.4/conf.d/04_xdebug.ini
    if ! grep --quiet 'xdebug' "$xdebug_config_file"; then
        cat <<'EOF' >>"$xdebug_config_file"
[xdebug]
xdebug.cli_color=1
xdebug.show_local_vars=1
EOF
    fi
    cd - || return
}

_upgrade_gcloud_components() {
    _log_info "Upgrading gcloud components"
    gcloud components update --quiet
}

_install_akamai_purge_command() {
    if ! (akamai list | grep --quiet purge); then
        _log_info "Installing akamai purge command"
        akamai install purge
    fi
}

_upgrade_akamai_commands() {
    _log_info "Upgrading akamai commands"
    akamai update
}

_install_tmux_plugin_manager() {
    tpm_dir="$XDG_CONFIG_HOME"/tmux/plugins/tpm
    if ! [ -d "$tpm_dir" ]; then
        _log_info "Installing tmux plugin manager"
        mkdir -p "$tpm_dir"
        git clone https://github.com/tmux-plugins/tpm "$tpm_dir"
    fi
}

_reinstall_neovim_stable() {
    _log_info "Reinstalling neovim stable"
    mise uninstall neovim@stable --yes
    mise use --global neovim@stable --yes
}

_install_or_upgrade_zinit() {
    if command -v zinit &>/dev/null; then
        _log_info "Upgrading zinit"
        zinit self-update
    else
        command -v zinit &>/dev/null && return
        _log_info "Installing zinit"
        zinit_home="$XDG_DATA_HOME"/zinit/zinit.git
        [ ! -d "$zinit_home" ] && mkdir -p "$(dirname "$zinit_home")"
        [ ! -d "$zinit_home"/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$zinit_home"
        source "$zinit_home/zinit.zsh"
    fi
}

_upgrade_zinit_plugins() {
    _log_info "Upgrading zinit plugins"
    zinit update --parallel
}

_sync_hosts_file() {
    _log_info "Syncing hosts file"
    sudo hostess apply "$HOME/.support/hosts.json"
}

_clear_evalcache() {
    _log_info "Clearing evalcache"
    rm -f "$ZSH_EVALCACHE_DIR/init-*.sh"
}

_apply_mac_preferences() {
    [ "$system_type" = "Darwin" ] || return
    _log_info "Setting general mac preferences"
    defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO
    defaults write com.apple.LaunchServices LSQuarantine -bool false                             # disable mac quarantining all downloaded files from mise
    defaults write -g NSWindowShouldDragOnGesture -bool true                                     # Enable cmd-ctrl-drag to drag window from any part, not just the titlebar
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false                     # Disable “natural” (Lion-style) scrolling
    defaults write com.apple.dock orientation -string 'left'                                     # dock on left side
    defaults write com.apple.dock "autohide" -bool true                                          # Autohide
    defaults write NSGlobalDomain AppleInterfaceStyle -string 'Dark'                             # mac dark mode
    defaults write NSGlobalDomain AppleAquaColorVariant -int 6                                   # graphite color theme
    defaults write com.apple.dashboard dashboard-enabled-state -int 1                            # disable dashboard
    defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40          # Increase sound quality for Bluetooth headphones/headsets
    defaults write com.apple.screensaver askForPassword -int 1                                   # Require password immediately after sleep or screen saver begins
    defaults write com.apple.screensaver askForPasswordDelay -int 0                              # Disable screensaver delay to ask for password
    defaults write com.apple.finder FXPreferredViewStyle -string "clmv"                          # Use column view in all Finder windows by default. Other view modes: `icnv`, `Nlsv`, `Flwv`
    defaults write com.apple.Finder AppleShowAllFiles true                                       # show hidden files in finder
    defaults write NSGlobalDomain "AppleShowAllExtensions" -bool true                            # Show file extensions
    defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false        # Chrome - Disable the all too sensitive backswipe on Magic Mouse
    defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false # Disable swipe for back/forward (e.g. browsers)
    defaults write com.apple.screencapture location ~/Screenshots                                # Save screenshots to ~/Screenshots
    defaults write com.apple.finder "FXDefaultSearchScope" -string "SCcf"                        # Search scope current folder
    defaults write com.apple.AdLib.plist allowApplePersonalizedAdvertising -bool false           # Disable Apple Advertising
    defaults write com.apple.AdLib.plist allowIdentifierForAdvertising -bool false               # Disable Apple Advertising
    defaults write com.apple.AdLib.plist personalizedAdsMigrated -bool false                     # Disable Apple Advertising
    defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false                           # disables "corrects spelling automatically"
    defaults write com.apple.dock orientation -string 'left'                                     # dock on left side
    defaults write com.apple.dashboard dashboard-enabled-state -int 1                            # disable dashboard
    defaults write NSGlobalDomain AppleAquaColorVariant -int 6                                   # graphite color theme
    chflags nohidden ~/Library                                                                   # Show the ~/Library folder
    # defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false # Disable press-and-hold for keys in favor of key repeat
    # defaults write NSGlobalDomain KeyRepeat -int 1 # Set a blazingly fast keyboard repeat rate
    # defaults write NSGlobalDomain InitialKeyRepeat -int 10

    killall Dock
    killall Finder
    killall SystemUIServer
}

_start_saatchi_tunnel() {
    [ "$system_type" = "Darwin" ] || return
    (lunchy status launched.mike.saatchi-tunnel.autossh | grep --quiet launched.mike.saatchi-tunnel.autossh) && return
    _log_info "Starting Saatchi tunnel"
    lunchy start --write launched.mike.saatchi-tunnel.autossh
}

_change_shell_to_zsh
_create_code_dir
_mac_xcode_command_line_tools
_install_homebrew
_install_upgrade_homebrew_packages
_update_mise_plugins
_install_and_upgrade_mise_dependencies
_decrypt_yadm_files
_install_and_configure_php_81_extensions
_install_and_configure_php_84_extensions
_upgrade_gcloud_components
_install_akamai_purge_command
_upgrade_akamai_commands
_install_tmux_plugin_manager
_reinstall_neovim_stable
_install_or_upgrade_zinit
_upgrade_zinit_plugins
# _sync_hosts_file
_clear_evalcache
_apply_mac_preferences
_start_saatchi_tunnel

_log_info "Installation complete"
