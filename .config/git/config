# vim: set foldmethod=marker:
# global git config

# Tips {{{
# g rbid: git rebase -i develop
# g rbi master: git rebase -i master
# g lg -2: show the last 2 commits in the git log
# g ffs my-feature-name: git flow feature start my-feature-name
# }}}

# General {{{
[apply]
    whitespace = nowarn
[http]
	sslVerify = false
[help]
	autocorrect = 10
[user]
    email = mike@mikefunk.com
    name = Mike Funk
	signingkey = 4E721DA7058E2551
[web]
    browser = open
[instaweb]
    httpd = webrick
[includeIf "gitdir/i:~/Code/saatchi/"]
    path = ~/.config/git/config-saatchi
[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f
[pre-commit]
    checks = php, tabs, white_space, console_log, merge_conflict, json, yaml, coffeelint
[github]
    user = mikedfunk
[url "git@github.com"]
    insteadOf = gh
[url "git@bitbucket.org"]
    insteadOf = bb
# large files... not sure what this does
[filter "lfs"]
    clean = git lfs clean %f
    smudge = git lfs smudge %f
    required = true
# [init]
    # templatedir = ~/.git_template
[mailmap]
    file = ~/.mailmap
[maintenance]
    repo = /Users/mikefunk/Code/saatchi/palette
    repo = /Users/mikefunk/Code/saatchi/easel
    repo = /Users/mikefunk/Code/saatchi/legacy
	repo = /Users/mikefunk/Code/saatchi/zed
[init]
	defaultBranch = main
# prevent corruption https://jvns.ca/blog/2024/02/16/popular-git-config-options/#diff-algorithm-histogram
[transfer]
    fsckobjects = true
[receive]
    fsckObjects = true
# sort tags by date https://jvns.ca/blog/2024/02/16/popular-git-config-options/
[tag]
    sort = taggerdate
# }}}

# Aliases {{{
[alias]
    # ahead = git log --branches --not --remotes
    br = branch
    brs = browse
    # list branches sorted by last modified
    # bm = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
    ci = commit
    # cl = clone
    # checkout develop, then run this to remove all local branches that haven't been
    # merged into develop or master
    cleanmerged = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"
    cm = !git add -A && git commit -am
    cma = !git add -A && git commit -a --amend --no-edit
    ca = !git add -A && git commit --amend
    cia = commit --amend --no-edit
    co = checkout
    cob = checkout -b
    # Fire up your difftool (e.g. Kaleidescope) with all the changes that
    # are on the current branch.
    # code-review = difftool origin/develop...
    committers = shortlog -nse --no-merges
    # commit and sign with gpg key
    cs = commit -S
    dc = diff --cached
    dd = diff develop..HEAD
    ddn = diff develop..HEAD --name-only
    # delete-prs = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
    # df = diff
    # dl = diff --cached HEAD~1 --name-only # show modified files _only_ in the last commit
    # dlc = diff --cached HEAD~1 # show a diff of _only_ the last commit
    dm = diff master..HEAD
    dmn = diff master..HEAD --name-only
    # ds = diff --stat # show files changed (only slightly different than git status)
    # show diffs one-by-one of each file that has changed. Takes a branch or hash or HEAD~1 or something.
    # e.g. g dt HEAD~1
    dt = difftool
    # I always define git config --global alias.exec '!exec ' so I can do things
    # like git exec make. This works because shell aliases are always executed in
    # the top-level directory.
    exec = "!exec "
    # git flow feature shortcuts
    # ffc = flow feature checkout
    # ffd = flow feature diff
    # fff = flow feature finish
    # fff = "!f() { git flow feature finish $1 && git push; }; f"
    # ffl = flow feature list
    # ffp = flow feature publish
    # ffpl = flow feature pull
    # ffr = flow feature rebase
    # ffs = "!f() { git checkout develop && git pull && git flow feature start $1; }; f"
    # ffs = "!f() { git checkout develop && git pull && git checkout -b feature/$1; }; f"
    # fft = flow feature track
    # git flow hotfix shortcuts
    # fhc = flow hotfix checkout
    # fhd = flow hotfix diff
    # fhf = flow hotfix finish
    # fhf = "!f() { git checkout develop && git pull && git checkout - && git checkout master && git pull && git flow hotfix finish $1 && git push && git checkout master && git push && git push --tags && git checkout develop && ( git push origin --delete hotfix/$1  || true ); }; f"
    # fhf = "!f() { git checkout develop && git pull && git checkout master && git pull && git flow hotfix finish $1 && git push && git checkout master && git push && git push --tags && git checkout develop && hub release create $1 -m $1; }; f"
    # fhl = flow hotfix list
    # fhp = flow hotfix publish
    # fhpl = flow hotfix pull
    # fhr = flow hotfix rebase
    # fhs = flow hotfix start
    # fhs = "!f() { git checkout develop && git pull && git checkout master && git pull && git flow hotfix start $1 && git push; }; f"
    # fht = flow hotfix track
    # git flow release shortcuts
    # frs = flow release start
    # frs = "!f() { git checkout develop && git pull && git checkout master && git pull && git flow release start $1 && git push; }; f"
    # frf = flow release finish
    # frf = "!f() { git checkout develop && git pull && git checkout master && git pull && git flow release finish $1 && git push && git checkout master && git push && git push --tags && git checkout develop && hub release create $1 -m $1; }; f"
    # show change for one file
    # filelog = log -u
    # fl = log -u
    ft = fetch --tags
    # git commit fixup using fzf to select which commit to fixup on
    cfd = "!f() { git commit --fixup $(git ld | fzf | awk '{print $1}'); }; f"
    cnd = "!f() { git commit --no-verify --fixup $(git ld | fzf | awk '{print $1}'); }; f"
    cfm = "!f() { git commit --fixup $(git lm | fzf | awk '{print $1}'); }; f"
    cnm = "!f() { git commit --no-verify --fixup $(git lm | fzf | awk '{print $1}'); }; f"
    # fuzzy checkout
    cof = "!f() { ( git branch | fzf | xargs git co ); }; f"
    # show the sha ref of the current HEAD
    # headref = "!git show-ref --head -s | awk 'NR==1'"
    # Show files ignored by git
    # ign = ls-files -o -i --exclude-standard
    iw = instaweb --httpd webrick
    # jira open
    jo = "!f() { git log develop.. --oneline | awk '/SA(AT)?-[0-9]{3,4}/' | head -n 1 | gsed --regexp-extended 's/^.*(SA(AT)?-[0-9]{3,4}).*$/https:\\/\\/saatchiart.atlassian.net\\/browse\\/\\1/' | xargs open; }; f"
    # kubernetes namespace
    kn = "!f() { echo $(git branch --show-current) | sed -E 's/(feature|hotfix|release)\\/([a-zA-Z0-9_.\\/-]{0,12}).*/\\2/' | sed -E 's/_/-/g' | sed -E 's/^(.*)-$/\\1/'; }; f"
    # list aliases
    la = "!git config -l | grep alias | cut -c 7-"
    # show latest commits on all branches by most recent
    latest = for-each-ref --sort=-committerdate refs/heads --format='%(committerdate:relative) %(refname:short)'
    # my go-to log format
    lg = log --use-mailmap --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%aN>%Creset'
    # lg = log --pretty=format:'commit %Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
    # log between the last semantic tag and HEAD
    lt = "!git pull && git lg --no-merges $(git semver | grep -v 'v' | tail -n1)..HEAD"
    # lgdate = log --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cd) %C(bold blue)<%an>%Creset'
    ld = log --use-mailmap --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' develop..HEAD --no-merges
    lm = log --use-mailmap --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' master..HEAD --no-merges
    lmn = "!git log --use-mailmap --pretty=format:'%h - %s (%cr) <%an>' master..HEAD --no-merges | pbcopy"
    # graphy log format with the visual branching on the left
    # lol = log --graph --decorate --pretty=oneline --abbrev-commit
    # lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    # show all files tracked by git in this branch
    ls = ls-files
    # show the last added tag! Helpful for git flow!
    # lasttag = describe --tags --abbrev=0
    # lt = describe --tags --abbrev=0
    mt = mergetool
    # To see what new commits have been created by the last command â€“
    # typically after a git pull. You invoke it for example with: git new HEAD
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    # another graphy log format
    # olg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    permission-reset = !git diff -p -R | grep -E \"^(diff|(old|new) mode)\" | git apply
    pl = pull --rebase
    # pl = !git fetch; git rebase --autostash
    # pnp = !git pull -r && git push
    # yo baby yo
    # po = !echo 'Ah push it' && git push origin && echo 'PUSH IT REAL GOOD'
    # pp = !git pull && git push
    prc = "!gh pr create"
    # PR fuzzy search
    prf = "!f() { gh pr list | fzf | head -n 1 | cut -c 1- | awk '{print $1}' | xargs hub pr show; }; f"
    pro = "!gh pr view --web"
    ps = push
    # pull and update submodules... i hate submodules...
    pup = !git pull --recurse-submodules && git submodule update
    psf = push --force
    # purr = pull --rebase
    # put = push --tags
    rbc = rebase --continue
    rbi = rebase -i
    rbd = rebase -i develop
    rbm = rebase -i master
    rbs = rebase --skip
    rba = rebase --abort
    # release create (useful for github-flow)
    rc = "!f() { git checkout develop && git pull && gh release create $1 --generate-notes && gh release ls --limit=1; }; f"
    # rebase interactively on to the upstream to this branch
    ready = rebase -i @{u}
    rh = reset --hard
    # root dir - e.g. cd $(git root)
    root = rev-parse --show-toplevel
    # hard to remember this one :/
    # rs = reset --soft HEAD^
    rsh = reset --soft HEAD^
    # show tags sorted by semantic version e.g. 3.1.0, 3.2.0, 3.10.0
    semver = !git fetch --tags && ( git tag --sort=v:refname | grep -E \"^\\d+\\.\\d+\\.\\d+$\" )
    # canimerge = !git checkout develop > /dev/null 2>&1 \
    #     && git pull --autostash > /dev/null 2>&1 \
    #     && git checkout - > /dev/null 2>&1 \
    #     && git fetch --tags > /dev/null 2>&1 \
    #     && LAST_SEMVER=$(git tag --sort=v:refname | grep -E \"^\\d+.\\d+.\\d+$\" | tail -n1) \
    #     && LOG=$(git log --oneline \"$LAST_SEMVER\"..develop --no-merges) \
    #     && [ -n \"$LOG\" ] \
    #     && echo \"\\n\\n !!! NOT SAFE TO MERGE !!! \\n\\n\\n${LOG}\" \
    #     || echo \"Safe to merge, no release is in progress.\"
    canimerge = !git pull --autostash >/dev/null \
        && git fetch --tags >/dev/null \
        && LAST_SEMVER=$(git tag --sort=v:refname | grep -E \"^\\d+.\\d+.\\d+$\" | tail -n1) \
        && LOG=$(git log --use-mailmap --pretty=format:'%h - %s (%cr) <%aN>' \"$LAST_SEMVER\"..origin/develop --no-merges) \
        && [ -n \"$LOG\" ] \
        && echo \"\\n$(tput setaf 1)$(tput rev)$(tput bold) \\xE2\\x9C\\x97 NOT SAFE TO MERGE! $(tput sgr0)\\n\\n${LOG}\\n\" \
        || echo \"\\n$(tput setaf 2)$(tput rev)$(tput bold) \\xE2\\x9C\\x93 Safe to merge, no release is in progress. $(tput sgr0)\\n\"
    # save a stash with "git stash save my_stash_name"
    # search for a stash by saved description e.g. "git sshow my_stash_name"
    sshow = "!f() { git stash show stash^{/$*} -p; }; f"
    # apply a stash by saved description e.g. "git sapply my_stash_name"
    sapply = "!f() { git stash apply stash^{/$*}; }; f"
    # fuzzy stash apply
    saf = "!f() { ( git stash list | fzf | awk -F':' '{print $1}' | xargs git stash apply ); }; f"
    sh = show HEAD
    st = status -sb
    # show all of my commits since yesterday
    # I use npm git-standup now instead
    # standup = log --pretty=format:'%Cred%h%Creset -%Creset %s %Cgreen(%cD) %C(bold blue)<%an>%Creset' --since yesterday --author "Mike Funk"
    stash-staged = "!f() { git stash --keep-index && git stash push -m \"staged\" --keep-index && git stash pop stash@{1}; }; f"
    stash-unapply = !git stash show -p | git apply -R
    synchd = "!f() { echo \"Syncing current branch with develop\" && git checkout develop && git pull -r && git checkout - && git rebase develop; }; f"
    synchm = "!f() { echo \"Syncing current branch with master\" && git checkout master && git pull -r && git checkout - && git rebase master; }; f"
    # usage: git synch my-branch-name
    synch = "!f() { echo \"Syncing current branch with $1\" && git checkout $1 && git pull -r && git checkout - && git rebase $1; }; f"
    undo = reset HEAD~1 --mixed # uncommit the last commit
    unstage = reset HEAD # hard to remember
    who = shortlog -ns --no-merges # who has contributed to a project
    wiff = diff --color-words
    wip = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads # show branches sorted ascending by recent
    # wip = !git add -u && git commit -m "WIP" # work in progress commit
    # uncommit the last commit... but make a backup ref first just in case
    # wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
	# ctags = !.git/hooks/ctags # https://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
# }}}

# Color and visual settings {{{
[color]
    # https://ericjmritz.wordpress.com/2015/11/10/using-tig-as-the-pager-for-git/
    # pager = false
    # branch = true
    # diff = true
    # status = true
    # showbranch = true
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    commit = green bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = "red bold 52"
    newNormal = "green bold"
    newHighlight = "green bold 22"
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
    ui = true
[commit]
	verbose = true
[format]
    # sets the git log format to be one line
    # pretty = '%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
[log]
    date = short
	mailmap = true
# }}}

# Core settings {{{
[core]
    # editor = vim
    editor = nvim
    # editor = $EDITOR
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    trustctime = false
    # if you want to specify a custom global gitignore location
    # I don't use this, I use ~/.config/git/ignore now
    # excludesfile = ~/.gitignore
    # autocrlf = input
    # autocrlf = true
    excludesfile = ~/.config/git/ignore
    attributesfile= ~/.config/git/attributes
    autocrlf = false
    ignorecase = false
    preloadindex = true
    # pager = diff-highlight | diff-so-fancy | less --tabs=1,5 -R
    # use diff-so-fancy and diff-highlight together
    # Below lets you jump to each item in a diff with n and N, but there are other things the pager is used for that errors with "pattern not found"
    # pager = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified): '
    # pager = diff-so-fancy | less --tabs=4
    # https://github.com/dandavison/delta
    pager = delta --diff-so-fancy
	# pager = ~/.support/delta-helper.sh
    # reduce lag in CLI git status (but breaks nvim plugin update)
	# fsmonitor = true
    # pager = delta --dark --syntax-theme='Monokai Extended Dark' --
	# askPass =
    # use tig as git pager
    # pager = tig --pretty=fuller
    # pager = tig
    # pager = less -FRSX
    # excludesfile = /Users/mikefunk/.config/git/ignore
# }}}

# interactive settings {{{
# https://github.com/dandavison/delta/issues/1114
# [add.interactive]
#     useBuiltin = false
[interactive]
	diffFilter = delta --color-only
# }}}

# diff and mergetool {{{
[diff]
    # tool = opendiff
    # tool = vimdiff
    compactionHeuristic = 1
	tool = nvimdiff3
	# tool = diffview
    # https://github.com/dandavison/delta#--color-moved-support
	colorMoved = default
	algorithm = histogram
	context = 10
	colorMovedWS = allow-indentation-change
[diftool "nvimdiff3"]
    path = nvim
    # path = $EDITOR
[mergetool "sourcetree"]
    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true
[merge]
    # tool = opendiff
    # tool = vimdiff
	tool = nvimdiff3
    # tool = vim-conflicted
    # tool = diffview

    # shows local, parent, then remote
    # http://psung.blogspot.com/2011/02/reducing-merge-headaches-git-meets.html
    # diff3 includes the ||||||| markers to give context, allowing us to deduce whether a change was an addition or a deletion.
    # conflictstyle = diff3
    conflictstyle = zdiff3
    autostash = true
[mergetool "nvimdiff3"]
    # path = nvim
    # cmd = nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
    cmd = $EDITOR -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
    # cmd = $EDITOR -f -c Gvdiffsplit! $MERGED
    # cmd = $EDITOR -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[mergetool "diffview"]
    # https://www.reddit.com/r/neovim/comments/158zdir/favorite_git_mergetool/jtdn6tf/
    cmd = nvim -f -c \"DiffviewOpen\"
[mergetool]
    keepBackup = false
    prompt = false
    path = nvim
    # path = $EDITOR
[pager]
    # this lets you skip to the next/prev file with `n` and `N`
    # diff = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified): '
# }}}

# rebasing, squashing, pushing, fetching {{{
[branch]
	sort = -committerdate
    # this breaks git flow hotfix finish. Just use git purr or sync to rebase. Tells git pull to rebase instead of merge.
    # autoSetupRebase = always
    # This just implicitly sets up a tracking branch when you `git branch` or `git checkout -b`. Same as `--track`. It's not necessary with autoSetupRemote.
    # autoSetupMerge = always
[rebase]
    # autosquash = true
    autostash = true
    # https://adamj.eu/tech/2022/10/15/how-to-rebase-stacked-git-branches/
    # updateRefs = true
[push]
    default = current
    # push any missing _annotated_ tags related to this branch to remote when
    # pushing a branch. Useful for git flow - pushes related release tags for
    # master/develop when pushing the branch without also pushing lightweight
    # tags.
    followTag = true
    # https://adamj.eu/tech/2022/10/31/git-how-to-automatically-create-upstream-branches/
	autoSetupRemote = true
[pull]
    rebase = true
[rerere]
    enabled = 1
    # autoupdate = true
[fetch]
    prune = true
	fsckobjects = true
# [sequence]
    # https://github.com/MitMaro/git-interactive-rebase-tool
    # editor = interactive-rebase-tool
# }}}

# credentials {{{
[credential]
	helper = /usr/local/share/gcm-core/git-credential-manager
    # helper = osxkeychain
[credential "https://dev.azure.com"]
	useHttpPath = true
# }}}

# git flow avh settings {{{
# @link https://github.com/petervanderdoes/gitflow-avh/wiki/Reference:-Configuration
[gitflow "feature.finish"]
    keepremote = false
[gitflow "release.finish"]
    keepremote = false
[gitflow "hotfix.finish"]
    keepremote = false
# }}}

# git-profile {{{
[profile "Saatchi"]
    name = Mike Funk
    email = mike.funk@leafgroup.com
[profile "Home"]
    name = Mike Funk
    email = mike@mikefunk.com
# }}}

# delta settings {{{
[delta]
    # DOESN'T WORK!
    # features = "unobtrusive-line-numbers side-by-side decorations"
    # features = unobtrusive-line-numbers decorations
    # hunk-header-decoration-style = "blue ul ol"
    # hyperlinks = true
    # keep-plus-minus-markers = true
    # light = true
    # light = true # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
    # syntax-theme = "Monokai Extended Light"
    # syntax-theme = DarkNeon
    # syntax-theme = Dracula
    file-decoration-style = "yellow bold ol ul"
    file-style = "yellow bold"
    hunk-header-decoration-style = "omit"
    hunk-header-style = "omit"
    line-numbers = true
    navigate = true # use n and N to move between diff sections
    side-by-side = true
    true-color = always
# }}}

# git-fixup {{{
[fixup]
    commit = true
    menu = fzf --height '60%' \
        --bind 'tab:toggle-preview' \
        --preview 'git show --color {+1}' \
        --preview-window=up:80% \
        --prompt 'Select commit: '
# }}}

# git-jump {{{
[jump]
    grepCmd = ag --column
# }}}

# git-spice {{{
[spice "branchCreate"]
	commit = false
[spice "submit"]
	navigationComment = multiple
# }}}

# git-secrets {{{
    [secrets]
        providers = git secrets --aws-provider
        patterns = (A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}
        patterns = (\"|')?(AWS|aws|Aws)?_?(SECRET|secret|Secret)?_?(ACCESS|access|Access)?_?(KEY|key|Key)(\"|')?\\s*(:|=>|=)\\s*(\"|')?[A-Za-z0-9/\\+=]{40}(\"|')?
        patterns = (\"|')?(AWS|aws|Aws)?_?(ACCOUNT|account|Account)_?(ID|id|Id)?(\"|')?\\s*(:|=>|=)\\s*(\"|')?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}(\"|')?
        allowed = AKIAIOSFODNN7EXAMPLE
        allowed = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
# }}}
