# tig config https://github.com/jonas/tig
# vim:foldmethod=marker:

# notes {{{
# ! Run the command in the foreground with output shown.
# @ Run the command in the background with no output.
# ? Prompt the user before executing the command.
# < Exit Tig after executing the command.
# + Run the command synchronously, and echo the first line of output to the status bar.
# }}}

# settings {{{
# this is the only refresh mode that works right now. At least it works! I
# would prefer listening for filesystem changes.
# https://github.com/jonas/tig/issues/794
set refresh-mode = periodic
set refresh-interval = 5
# set refresh-mode = auto
# I have a meticulously mapped ~/.mailmap to dedupe committers.
set mailmap = true
set line-graphics = utf-8
# set diff-highlight = true
set mouse = true
set mouse-wheel-cursor = true
# set ignore-space = yes
set main-view = line-number:no,interval=5 \
    id:no,color=yes \
    date:relative,local=no,format= \
    author:full \
    commit-title:yes,graph=v2,refs=yes
set refs-view = line-number:no \
    id:no,color=yes \
    date:relative,local=no,format= \
    author:full \
    ref \
    commit-title:yes,graph=no,refs=no
# }}}

# bindings {{{
# https://github.com/jonas/tig/wiki/Bindings

# main {{{
#
# Cherry-pick current commit onto current branch
bind main P ?@git cherry-pick %(commit)

# bind main ! !git revert %(commit)
bind main grv !git revert %(commit)

# open the commit on github (brs = browse)
# bind main gbrs @sh -c "open 'https://'$(git remote -v | grep -Eo 'github.com[:/][^.]+' | head -1 | tr : /)'/commit/%(commit)'"
bind main B @sh -c "open 'https://'$(git remote -v | grep -Eo 'github.com[:/][^.]+' | head -1 | tr : /)'/commit/%(commit)'"

# Show commit statistics for the author under the cursor
bind main U +sh -c 'git --no-pager shortlog -s --author="$(git show -s --format=%aE %(commit))" </dev/tty'
# }}}

# status {{{
bind status P !gh pr create
# bind status V @gh pr view
bind status V @sh -c "gh pr view | grep 'View this pull request' | awk 'NF>1{print $NF}' | xargs open"

# Go to the first file in the status view
bind status <Ctrl-n> :/^.$

bind status go @git open

# commit but ignore pre-commit hooks (useful when my yelp pre-commit checks are buggy, mostly because my phpcs rules are old versions that are compatible with php 7.0 :/ )
bind status N !git commit -n
bind status A none
bind status A ?git commit --amend

bind status D ?@rm %(file)

bind status gst !git stash-staged
# }}}

# pager {{{
bind pager <Ctrl-n> :/^commit
bind pager <Ctrl-p> :?^commit
# }}}

# stage {{{

# quickly jump to the next diff chunk in the stage view (Enter in stage view)
bind stage <Enter> :/^@@
# }}}

# stash {{{
bind stash S @git stash save "%(prompt Enter stash name: )"
# default bindings:
# A ?git stash apply %(stash)
# P ?git stash pop %(stash)
# ! ?git stash drop %(stash)
bind stash D ?git stash drop %(stash)
# }}}

# refs {{{
# Reload ~/.tigrc when 'S' is pressed
# bind generic S :source .tigrc
# TODO map something to checkout the current file from develop
bind refs R @?git rebase %(branch)
bind refs B @git checkout -b "%(prompt Enter new branch name: )"
bind refs D @?git branch -D %(branch) && git push origin --delete %(branch)
bind refs F @git flow feature start "%(prompt Enter feature branch name: )"
bind refs V @sh -c "gh pr view | grep 'View this pull request' | awk 'NF>1{print $NF}' | xargs open"

# same thing but without output
bind refs C @git switch %(branch)
bind refs P @gh pr checkout "%(prompt Enter pull request number: )"
# }}}

# reflog {{{
# }}}

# generic {{{
# move grep command to grep. since gg is taken, ggr won't work :/
bind generic g none
bind generic grep view-grep

# gc: commit/clean/checkout
# amend last commit  (+ in any view)
bind generic gca ?git commit --amend
bind generic gcfd !git cfd
bind generic gcnd !git cnd
bind generic gcfm !git cfm
bind generic gcnm !git cnm
bind generic gclf @git clean -f
bind generic gco- @git checkout -
# fzf fuzzy checkout branch
bind generic gcof !git cof
# bind generic <C-B> !git fco
# this is easier to type than gfco
# bind generic gbb !git fco
bind generic gcob @git checkout -b "%(prompt Enter branch name: )"
# commit and sign with gpg key
bind generic gcs @git cs
bind generic gcop @gh pr checkout "%(prompt Enter PR number: )"
# gf: fetch/flow
bind generic gft !git fetch --tags
# git flow
# bind generic gffs @git ffs "%(prompt Enter feature branch name: )"
# bind generic gfhf !git fhf "%(prompt Enter hotfix version: )"
# bind generic gfhs @git fhs "%(prompt Enter hotfix version: )"
# bind generic gfrf !git frf "%(prompt Enter release version: )"
# bind generic gfrs @git frs "%(prompt Enter release version: )"
# github flow
bind generic gfc !git checkout develop && git pull && git checkout -b feature/"%(prompt Enter feature branch name: )"
bind generic ghc !git checkout develop && git pull && git checkout -b hotfix/"%(prompt Enter hotfix branch name: )"

# bind generic A none
# gj: jira open
bind generic gjo @git jo

# gl: log
bind generic gld !git ld
bind generic glm !git lm
bind generic glt !git lt
bind generic go @git open
bind generic gpf ?git push --force
bind generic gpl !git pull --rebase
# gp: push/pull/pr
bind generic gprc !gh pr create
# PR fuzzy search
bind generic gprf @git prf
bind generic gpro !git pro
# pneumonic: git pr get
bind generic gprg @gh pr checkout "%(prompt Enter pull request number: )"
bind generic gprl !gh pr list
bind generic gprs !gh pr status
bind generic gprv @gh pr view
bind generic gps !git push
# gr: rebase/reset/release
bind generic grbd !git rbd --autosquash
bind generic grbm !git rbm --autosquash
bind generic grbc !git spice rebase continue
bind generic grba !git spice rebase continue
bind generic grh @?git reset --hard
bind generic grs @?git reset --soft HEAD^
bind generic gru @?git checkout -- .
bind generic grc !git rc "%(prompt Enter release version: )"
# gs: git sync/stash/semver
bind generic gsa @git stash apply stash@{"%(prompt Enter stash position e.g. 0: )"}
bind generic gsb !git synch "%(prompt Enter branch name: )"
bind generic gsd !git synchd
bind generic gsl !git stash list
# fuzzy stash apply
bind generic gsaf !git saf
bind generic gsm !git synchm
bind generic gss @git stash save "%(prompt Enter stash name: )"
bind generic gsv !git semver
bind generic gcim !git canimerge
bind generic gcm !?git cleanmerged
bind generic gmt !git mergetool
# gS: git spice (stacked PR management)
# (color is messed up in dark mode on this one)
bind generic gSs !git spice branch split
bind generic gSr @git spice stack restack
# (pneumonic: publish)
bind generic gSp !sh -c "git spice repo sync && git spice stack restack && git spice stack submit"
# (pneumonic: new)
bind generic gSn !git spice branch create "%(prompt Enter branch name: )"
bind generic gSc !git spice branch checkout
# (pneumonic: graft)
bind generic gSg !git spice upstack onto
bind generic gSe !git spice stack edit
bind generic gSt @git spice branch track

# Go back to the previous view state
bind generic <C-O> back

# Close all views and quit
bind generic ZZ quit

# Focus the next view
# bind generic <Tab> view-next
bind generic <C-W>n view-next

# wtf there is a view-next but no view-previous??
# bind generic <C-W>p view-previous
bind generic gg move-first-line
bind generic G move-last-line
bind generic <C-U> move-half-page-up
bind generic <C-D> move-half-page-down
bind generic zh scroll-left
bind generic zl scroll-right
# bind generic <C-Y> scroll-line-up
# bind generic <C-E> scroll-line-down
# bind generic <C-B> scroll-page-up
# bind generic <C-F> scroll-page-down
# gkn: kubernetes-namespace
bind generic gkn !git kn

# }}}

# diff {{{
# move in diff view with arrow keys (up or down in diff view)
# bind diff <Up> move-up
# bind diff <Down> move-down
# I can't seem to make this work inside of tig... it appears tig's diff options are limited
bind generic gdd !git diff develop..
bind generic gdm !git diff master..
# }}}

# log {{{
bind log <Ctrl-n> :/^commit
bind log <Ctrl-p> :?^commit
bind log A none
bind log A ?git commit --amend
bind log B @sh -c "open 'https://'$(git remote -v | grep -Eo 'github.com[:/][^.]+' | head -1 | tr : /)'/commit/%(commit)'"
# }}}

# }}}

# colorscheme {{{
# TODO
# }}}
